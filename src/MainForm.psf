<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAJuLSURBVHhe7J0FeFTXuoa59x7rscrpOXVvT93d
S6nQAqUFirsFgoQQJyQhIYEQNyAChAQLcXd3d3ebJDNx93x3rT0TrKGlLbSR/+V5H7J97T0ze31r
6yyCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIIjfjaN//OP/xb337rtxWlracdoH9OK0tA+QJEmS
JDll1I3T1dWP2759W9wdt98ex+p27o/zf//3v5mrV6+BT3A0cirEKKxtQ0F1K0mSJEmSU8ii2nak
F9XAwuooHnrwAciq+evzzjvvxHkHRiGjvBlRmeWIzCgjSZIkSXKKGcGMya0RGvNKSio/HQD4Yf+8
SgmisysRk1VBkiRJkuQUNZqZXtaMgODInw4Aurp6ceUNXcJEsSwEkCRJkiQ5NY1hZla0wDcw7KcD
wIEDunFlDZ2IzalGfC5JkiRJTh4T82uYtbfIGmEZCezvhLxbIJuvMP+8W7kO0mWMG8fMrmyFT0Do
Lw8APEVEZVZcMpoNj8pi/ZjC31cMi8muumpakiRJkvy1JrAKOiSxEOd943HOJwHnb6rxCE4oECrn
gNgseIYkwCssiZl4cwxNhE9ECmuVs/ozoxwXA5Jwzjt+gnL8Mvn2OOsdx5aRddU2+9kBgJ8CiMut
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
HeE3v/l/8xY0xXrMsvgAAAAASUVORK5CYII=</Preview>
  <Form>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
pqdEUwEA</Form>
  <Code><![CDATA[
$formServiceAccounts_Load = {
	
	$formServiceAccounts.Text = "Service Accounts $FormVersion"

	# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
	Show-GMSAInfo
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
	#Get-SSAToDGV
	
	# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
	#Show-SSAInfo

}

#region Control Helper Functions
function Add-SPNtoGMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] is already added to [$gMSA]" -Title "Already added" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{add="$ServicePrincipalName" }
				
				If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
				{
					return $true
				}
				Else
				{
					Show-MsgBox -Prompt "Failed adding [$ServicePrincipalName] to [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
		else
		{
			Show-MsgBox -Prompt "Please enter a SPN" -Title "Failure" -Icon Information -BoxType OKOnly -DefaultButton '1'
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Remove-SPNfromGMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If (!($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName"))
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] was not found added to [$gMSA]" -Title "Not found" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				$Confirmation = Show-MsgBox -Prompt "Remove [$ServicePrincipalName] from [$gMSA]`?" -Title "Remove SPN?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
				
				If ($Confirmation -eq "YES")
				{
					Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{ remove = "$ServicePrincipalName" }
					
					If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
					{
						Show-MsgBox -Prompt "Failed to remove [$ServicePrincipalName] from [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-GMSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$gMSA] from [$Group]?" -Title "Remove gMSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				$GroupObj = Get-ADGroup -Filter { name -eq $Group }
				Remove-ADGroupMember -Identity $GroupObj -Members $gMSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $GroupObj) -contains $gMSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$gMSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-SSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$SSA] from [$Group]?" -Title "Remove SSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				$GroupObj = Get-ADGroup -Filter { name -eq $Group }
				Remove-ADGroupMember -Identity $GroupObj -Members $SSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $GroupObj) -contains $SSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$SSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Add-PrincipalsAllowedToRetrievePassword
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToAdd
	)
	
	Try
	{
		$CumulativePrincipals = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		$CumulativePrincipals += (Get-ADObject -filter { ( Name -eq $PrincipalToAdd ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group")) }).DistinguishedName
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $CumulativePrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-PrincipalsAllowedToRetrievePassword
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToRemove
	)
	Try
	{
		# REMOVE PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		
		# GET THE CURRENT PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		$CurrentPrincipalName = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		
		# GET THE DISTINGUISHED NAME OF THE SELECTED PRINCIPAL
		$SelectedPrinicipalName = $(Get-ADObject -Filter { ( Name -eq $PrincipalToRemove ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group" )) }).DistinguishedName
		
		# GET ONLY CURRENT PRINCIPALS THAT DO NOT MATCH THE SELECTED PRINCIPAL
		$DesiredPrincipals = $CurrentPrincipalName -ne $SelectedPrinicipalName
		
		# APPLY ONLY THE REMOANING PRINCIPALS
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $DesiredPrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Add-GMSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$gMsaAcctObj = Get-ADServiceAccount $gMSA
		$GroupObj = Get-ADGroup -Filter { name -eq $Group }
		Add-ADGroupMember -Members $gMsaAcctObj.SID.Value -Identity $GroupObj

	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Add-SSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$SSAAcctObj = Get-ADUser $SSA
		$GroupObj = Get-ADGroup -Filter { name -eq $Group }
		Add-ADGroupMember -Members $SSAAcctObj.SID.Value -Identity $GroupObj
		
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Test-GMSAPropertyChange
{
	If (($textbox_GMSA_Description.ForeColor -eq 'Green') -or
		($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_GMSA_DNSName.ForeColor -eq 'Green') -or
		($checkbox_GMSA_DES.ForeColor -eq 'Green') -or
		($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_GMSA_Apply.Enabled = $true
	}
	else
	{
		$button_GMSA_Apply.Enabled = $false
	}
}

function Test-SSAPropertyChange
{
	If (($textbox_SSA_Description.ForeColor -eq 'Green') -or
		($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_SSA_Password.ForeColor -eq 'Green') -or
		($checkbox_SSA_DES.ForeColor -eq 'Green') -or
		($checkbox_SSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_SSA_Apply.Enabled = $true
	}
	else
	{
		$button_SSA_Apply.Enabled = $false
	}
}

function Remove-GMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectGMSAtoremove = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectGMSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectGMSAtoremove)
	{
		Remove-ADServiceAccount -Identity $SelectGMSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Remove-SSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectSSAtoremove = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectSSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectSSAtoremove)
	{
		Remove-ADUser -Identity $SelectSSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Modify-GMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	# MODIFY THE GMSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_GMSA_EnabledNo.Checked -eq $true)
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $false
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_GMSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_Description.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Description
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Description $textbox_GMSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_GMSA_FunctionalOwner.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Department
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Replace @{ "Department" = $($combobox_GMSA_FunctionalOwner.Text) }
		}
	}
	
	# DNS HOSTNAME
	If ($textbox_GMSA_DNSName.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_DNSName.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear DNSHostName
		}
		Else
		{
			Set-ADServiceAccount -Identity $gMSA -DNSHostName $textbox_GMSA_DNSName.Text
		}
		
	}
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_GMSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_GMSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_GMSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_GMSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_GMSA_DES.ForeColor -eq 'Green') -or ($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_GMSA_DES.Checked -eq $true) -or ($checkbox_GMSA_RC4.Checked -eq $true) -or ($checkbox_GMSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADServiceAccount -Identity $gMSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Modify-SSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA
	)
	
	# MODIFY THE SSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_SSA_EnabledNo.Checked -eq $true)
		{
			Set-ADUser -Identity $SSA -Enabled $false
		}
		else
		{
			Set-ADUser -Identity $SSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_SSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_SSA_Description.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Description
		}
		else
		{
			Set-ADUser -Identity $SSA -Description $textbox_SSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_SSA_FunctionalOwner.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Department
		}
		else
		{
			Set-ADUser -Identity $SSA -Replace @{ "Department" = $($combobox_SSA_FunctionalOwner.Text) }
		}
	}
	
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_SSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_SSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_SSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_SSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_SSA_DES.ForeColor -eq 'Green') -or ($checkbox_SSA_RC4.ForeColor -eq 'Green') -or ($checkbox_SSA_AES128.ForeColor -eq 'Green') -or ($checkbox_SSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_SSA_DES.Checked -eq $true) -or ($checkbox_SSA_RC4.Checked -eq $true) -or ($checkbox_SSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADUser -Identity $SSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
	
	# PASSWORD
	If ($textbox_SSA_Password.ForeColor -eq 'Green')
	{
		
		# ASK IF THE USER HAS RECORDED THE PASSWORD - LAST CHANCE
		If ($textbox_SSA_Password.Text -ne "")
		{
			$ConfirmRecordedPassword = Show-MsgBox -Prompt "Have you recorded the requested password?`r`n`r`nIt will not be available after changed." -Title 'Password Change Confirmation' -Icon Question -BoxType YesNo -DefaultButton 1
		}
		
		If ($ConfirmRecordedPassword -eq "Yes")
		{
			$sec_password = ConvertTo-SecureString $textbox_SSA_Password.Text -AsPlainText -Force
			Set-ADAccountPassword -Identity $SSA -Reset -NewPassword $sec_password
			Show-MsgBox -Prompt "The password has been changed" -Title "Success" -Icon Information -BoxType OKOnly
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			return
		}
		
	}
}

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}

	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
	Remove-GMSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA: $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						#If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						#{
						#	$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						#}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}	
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	Remove-SSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove $SelectedSSA"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}

			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name
		
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found."
			}
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select

	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Group Managed Service Accounts were found."
		}
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name

		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}

		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Accounts were found."
			}
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Accounts were found."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}


function Search-DataGridView
{
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	If ($GroupManagedServiceAccount)
	{
		
		If ($FromStandardServiceAccount)
		{
			$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
			[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
			Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
		}
		else
		{
			Show-NewGMSAWizard_psf
		}
		
		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
		{
			# RELOAD THE GMSA ACCOUNT LIST
			Get-GMSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_GMSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-GMSAInfo
		}
	}
	elseif ($StandardServiceAccount)
	{
		# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
		Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text

		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
		{
			# RELOAD THE SSA ACCOUNT LIST
			Get-SSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_SSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-SSAInfo
		}
	}
	
}

#endregion


#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

$button_GMSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount
	
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
	
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$textbox_GMSA_DNSName_TextChanged={
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
	
}

$button_GMSA_Apply_Click = {
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE GMSA PROPERTIES
			Modify-GMSA -gMSA $SelectedGMSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE GMSA ACCOUNT LIST
		Get-GMSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)

		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
	
}

$button_GMSA_SPNAdd_Click={
	
	# ADD SPN
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	Show-GMSAInfo
	
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	If (Show-GroupPicker_psf)
	{
		If ($SelectedADObject)
		{
			Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	Show-GMSAInfo
	
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveMemberOf_Click={
	
	# REMOVE GMSA FROM SELECTED GROUP
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}


$contextmenustrip_GMSA_Remove_Click = {
	
	Remove-GMSA -Confirm:$false
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

#endregion Group Managed Service Account Tab


#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	Get-SSAToDGV
	
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
	
}

$button_SSA_Refresh_Click = {
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	Get-SSAToDGV
	Show-SSAInfo
	
}

$button_SSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -StandardServiceAccount
	
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
	
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$button_SSA_Password_Click = {
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 25 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 25
	
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
	
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
	
}

$button_SSA_Apply_Click = {
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE SSA PROPERTIES
			Modify-SSA -SSA $SelectedSSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE SSA ACCOUNT LIST
		Get-SSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			Show-SSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_SSA_RemoveMemberOf_Click = {
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-SSAInfo
	
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}

$contextmenustrip_SSA_Remove_Click = {
	
	Remove-SSA -Confirm:$false
	Get-SSAToDGV
	Show-SSAInfo
	
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
}




#endregion Standard Service Account Tab

$tabcontrol_ServiceAccounts_SelectedIndexChanged={
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
	}

}
$button_ServiceAccounts_About_Click={
	
	Show-MsgBox -Title "About" -Prompt "Created by:`r`n`r`n$Author`r`n$AuthorEmail" -Icon Information -BoxType OKOnly
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
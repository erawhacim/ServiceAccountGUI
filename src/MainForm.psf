<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>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
TkSuQmCC</Preview>
  <Form>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
IdiMv/9KfPkz/fv/A4z9UGRHUwEA</Form>
  <Code><![CDATA[
$formServiceAccounts_Load = {
	
	$formServiceAccounts.Text = "Service Accounts $FormVersion"

	# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
	Show-GMSAInfo
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
	#Get-SSAToDGV
	
	# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
	#Show-SSAInfo

}

#region Control Helper Functions
function Add-SPNtoGMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] is already added to [$gMSA]" -Title "Already added" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{add="$ServicePrincipalName" }
				
				If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
				{
					return $true
				}
				Else
				{
					Show-MsgBox -Prompt "Failed adding [$ServicePrincipalName] to [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
		else
		{
			Show-MsgBox -Prompt "Please enter a SPN" -Title "Failure" -Icon Information -BoxType OKOnly -DefaultButton '1'
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Remove-SPNfromGMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If (!($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName"))
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] was not found added to [$gMSA]" -Title "Not found" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				$Confirmation = Show-MsgBox -Prompt "Remove [$ServicePrincipalName] from [$gMSA]`?" -Title "Remove SPN?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
				
				If ($Confirmation -eq "YES")
				{
					Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{ remove = "$ServicePrincipalName" }
					
					If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
					{
						Show-MsgBox -Prompt "Failed to remove [$ServicePrincipalName] from [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-GMSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$gMSA] from [$Group]?" -Title "Remove gMSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $gMSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $gMSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$gMSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-SSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$SSA] from [$Group]?" -Title "Remove SSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $SSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $SSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$SSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Add-PrincipalsAllowedToRetrievePassword
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToAdd
	)
	
	Try
	{
		$CumulativePrincipals = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		$CumulativePrincipals += (Get-ADObject -filter { ( Name -eq $PrincipalToAdd ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group")) }).DistinguishedName
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $CumulativePrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error2" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-PrincipalsAllowedToRetrievePassword
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToRemove
	)
	Try
	{
		# REMOVE PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		
		# GET THE CURRENT PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		$CurrentPrincipalName = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		
		# GET THE DISTINGUISHED NAME OF THE SELECTED PRINCIPAL
		$SelectedPrinicipalName = $(Get-ADObject -Filter { ( Name -eq $PrincipalToRemove ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group" )) }).DistinguishedName
		
		# GET ONLY CURRENT PRINCIPALS THAT DO NOT MATCH THE SELECTED PRINCIPAL
		$DesiredPrincipals = $CurrentPrincipalName -ne $SelectedPrinicipalName
		
		# APPLY ONLY THE REMOANING PRINCIPALS
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $DesiredPrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Add-GMSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$gMsaAcctObj = Get-ADServiceAccount $gMSA
		Add-ADGroupMember -Members $gMsaAcctObj.SID.Value -Identity $Group

	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Add-SSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$SSAAcctObj = Get-ADUser $SSA
		Add-ADGroupMember -Members $SSAAcctObj.SID.Value -Identity $Group
		
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Test-GMSAPropertyChange
{
	If (($textbox_GMSA_Description.ForeColor -eq 'Green') -or
		($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_GMSA_DNSName.ForeColor -eq 'Green') -or
		($checkbox_GMSA_DES.ForeColor -eq 'Green') -or
		($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_GMSA_Apply.Enabled = $true
	}
	else
	{
		$button_GMSA_Apply.Enabled = $false
	}
}

function Test-SSAPropertyChange
{
	If (($textbox_SSA_Description.ForeColor -eq 'Green') -or
		($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_SSA_Password.ForeColor -eq 'Green') -or
		($checkbox_SSA_DES.ForeColor -eq 'Green') -or
		($checkbox_SSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_SSA_Apply.Enabled = $true
	}
	else
	{
		$button_SSA_Apply.Enabled = $false
	}
}

function Remove-GMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectGMSAtoremove = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectGMSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectGMSAtoremove)
	{
		Remove-ADServiceAccount -Identity $SelectGMSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Remove-SSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectSSAtoremove = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectSSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectSSAtoremove)
	{
		Remove-ADUser -Identity $SelectSSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Modify-GMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	# MODIFY THE GMSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_GMSA_EnabledNo.Checked -eq $true)
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $false
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_GMSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_Description.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Description
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Description $textbox_GMSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_GMSA_FunctionalOwner.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Department
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Replace @{ "Department" = $($combobox_GMSA_FunctionalOwner.Text) }
		}
	}
	
	# DNS HOSTNAME
	If ($textbox_GMSA_DNSName.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_DNSName.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear DNSHostName
		}
		Else
		{
			Set-ADServiceAccount -Identity $gMSA -DNSHostName $textbox_GMSA_DNSName.Text
		}
		
	}
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_GMSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_GMSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_GMSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_GMSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_GMSA_DES.ForeColor -eq 'Green') -or ($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_GMSA_DES.Checked -eq $true) -or ($checkbox_GMSA_RC4.Checked -eq $true) -or ($checkbox_GMSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADServiceAccount -Identity $gMSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Modify-SSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA
	)
	
	# MODIFY THE SSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_SSA_EnabledNo.Checked -eq $true)
		{
			Set-ADUser -Identity $SSA -Enabled $false
		}
		else
		{
			Set-ADUser -Identity $SSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_SSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_SSA_Description.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Description
		}
		else
		{
			Set-ADUser -Identity $SSA -Description $textbox_SSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_SSA_FunctionalOwner.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Department
		}
		else
		{
			Set-ADUser -Identity $SSA -Replace @{ "Department" = $($combobox_SSA_FunctionalOwner.Text) }
		}
	}
	
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_SSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_SSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_SSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_SSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_SSA_DES.ForeColor -eq 'Green') -or ($checkbox_SSA_RC4.ForeColor -eq 'Green') -or ($checkbox_SSA_AES128.ForeColor -eq 'Green') -or ($checkbox_SSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_SSA_DES.Checked -eq $true) -or ($checkbox_SSA_RC4.Checked -eq $true) -or ($checkbox_SSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADUser -Identity $SSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
	
	# PASSWORD
	If ($textbox_SSA_Password.ForeColor -eq 'Green')
	{
		
		# ASK IF THE USER HAS RECORDED THE PASSWORD - LAST CHANCE
		If ($textbox_SSA_Password.Text -ne "")
		{
			$ConfirmRecordedPassword = Show-MsgBox -Prompt "Have you recorded the requested password?`r`n`r`nIt will not be available after changed." -Title 'Password Change Confirmation' -Icon Question -BoxType YesNo -DefaultButton 1
		}
		
		If ($ConfirmRecordedPassword -eq "Yes")
		{
			$sec_password = ConvertTo-SecureString $textbox_SSA_Password.Text -AsPlainText -Force
			Set-ADAccountPassword -Identity $SSA -Reset -NewPassword $sec_password
			Show-MsgBox -Prompt "The password has been changed" -Title "Success" -Icon Information -BoxType OKOnly
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			return
		}
		
	}
}

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}

	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
	Remove-GMSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA: $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						#If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						#{
						#	$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						#}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}	
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	Remove-SSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove $SelectedSSA"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}

			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name
		
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found."
			}
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select

	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Group Managed Service Accounts were found."
		}
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name

		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}

		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Accounts were found."
			}
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Accounts were found."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}


function Search-DataGridView
{
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	If ($GroupManagedServiceAccount)
	{
		
		If ($FromStandardServiceAccount)
		{
			$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
			[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
			Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
		}
		else
		{
			Show-NewGMSAWizard_psf
		}
		
		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
		{
			# RELOAD THE GMSA ACCOUNT LIST
			Get-GMSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_GMSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-GMSAInfo
		}
	}
	elseif ($StandardServiceAccount)
	{
		# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
		Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text

		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
		{
			# RELOAD THE SSA ACCOUNT LIST
			Get-SSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_SSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-SSAInfo
		}
	}
	
}

#endregion


#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

$button_GMSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount
	
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
	
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$textbox_GMSA_DNSName_TextChanged={
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
	
}

$button_GMSA_Apply_Click = {
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE GMSA PROPERTIES
			Modify-GMSA -gMSA $SelectedGMSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE GMSA ACCOUNT LIST
		Get-GMSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)

		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
	
}

$button_GMSA_SPNAdd_Click={
	
	# ADD SPN
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	Show-GMSAInfo
	
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	If (Show-GroupPicker_psf)
	{
		If ($SelectedADObject)
		{
			Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	Show-GMSAInfo
	
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveMemberOf_Click={
	
	# REMOVE GMSA FROM SELECTED GROUP
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}


$contextmenustrip_GMSA_Remove_Click = {
	
	Remove-GMSA -Confirm:$false
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

#endregion Group Managed Service Account Tab


#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	Get-SSAToDGV
	
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
	
}

$button_SSA_Refresh_Click = {
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	Get-SSAToDGV
	Show-SSAInfo
	
}

$button_SSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -StandardServiceAccount
	
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
	
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$button_SSA_Password_Click = {
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 25 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 25
	
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
	
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
	
}

$button_SSA_Apply_Click = {
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE SSA PROPERTIES
			Modify-SSA -SSA $SelectedSSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE SSA ACCOUNT LIST
		Get-SSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			Show-SSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_SSA_RemoveMemberOf_Click = {
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-SSAInfo
	
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}

$contextmenustrip_SSA_Remove_Click = {
	
	Remove-SSA -Confirm:$false
	Get-SSAToDGV
	Show-SSAInfo
	
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
}




#endregion Standard Service Account Tab

$tabcontrol_ServiceAccounts_SelectedIndexChanged={
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
	}

}
$button_ServiceAccounts_About_Click={
	
	Show-MsgBox -Title "About" -Prompt "Created by:`r`n`r`n$Author`r`n$AuthorEmail" -Icon Information -BoxType OKOnly
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formServiceAccounts_Load = {
	
	$formServiceAccounts.Text = "Service Accounts $FormVersion"

	# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
	Show-GMSAInfo
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
	#Get-SSAToDGV
	
	# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
	#Show-SSAInfo

}

#region Control Helper Functions
function Add-SPNtoGMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] is already added to [$gMSA]" -Title "Already added" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{add="$ServicePrincipalName" }
				
				If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
				{
					return $true
				}
				Else
				{
					Show-MsgBox -Prompt "Failed adding [$ServicePrincipalName] to [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
		else
		{
			Show-MsgBox -Prompt "Please enter a SPN" -Title "Failure" -Icon Information -BoxType OKOnly -DefaultButton '1'
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Remove-SPNfromGMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If (!($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName"))
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] was not found added to [$gMSA]" -Title "Not found" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				$Confirmation = Show-MsgBox -Prompt "Remove [$ServicePrincipalName] from [$gMSA]`?" -Title "Remove SPN?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
				
				If ($Confirmation -eq "YES")
				{
					Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{ remove = "$ServicePrincipalName" }
					
					If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
					{
						Show-MsgBox -Prompt "Failed to remove [$ServicePrincipalName] from [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-GMSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$gMSA] from [$Group]?" -Title "Remove gMSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $gMSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $gMSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$gMSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-SSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$SSA] from [$Group]?" -Title "Remove SSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $SSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $SSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$SSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Add-PrincipalsAllowedToRetrievePassword
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToAdd
	)
	
	Try
	{
		$CumulativePrincipals = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		$CumulativePrincipals += (Get-ADObject -filter { Name -eq $PrincipalToAdd }).DistinguishedName
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $CumulativePrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-PrincipalsAllowedToRetrievePassword
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToRemove
	)
	Try
	{
		# REMOVE PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		
		# GET THE CURRENT PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		$CurrentPrincipalName = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		
		# GET THE DISTINGUISHED NAME OF THE SELECTED PRINCIPAL
		$SelectedPrinicipalName = $(Get-ADObject -Filter { Name -eq $PrincipalToRemove }).DistinguishedName
		
		# GET ONLY CURRENT PRINCIPALS THAT DO NOT MATCH THE SELECTED PRINCIPAL
		$DesiredPrincipals = $CurrentPrincipalName -ne $SelectedPrinicipalName
		
		# APPLY ONLY THE REMOANING PRINCIPALS
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $DesiredPrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Add-GMSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$gMsaAcctObj = Get-ADServiceAccount $gMSA
		Add-ADGroupMember -Members $gMsaAcctObj.SID.Value -Identity $Group

	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Add-SSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$SSAAcctObj = Get-ADUser $SSA
		Add-ADGroupMember -Members $SSAAcctObj.SID.Value -Identity $Group
		
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Test-GMSAPropertyChange
{
	If (($textbox_GMSA_Description.ForeColor -eq 'Green') -or
		($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_GMSA_DNSName.ForeColor -eq 'Green') -or
		($checkbox_GMSA_DES.ForeColor -eq 'Green') -or
		($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_GMSA_Apply.Enabled = $true
	}
	else
	{
		$button_GMSA_Apply.Enabled = $false
	}
}

function Test-SSAPropertyChange
{
	If (($textbox_SSA_Description.ForeColor -eq 'Green') -or
		($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_SSA_Password.ForeColor -eq 'Green') -or
		($checkbox_SSA_DES.ForeColor -eq 'Green') -or
		($checkbox_SSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_SSA_Apply.Enabled = $true
	}
	else
	{
		$button_SSA_Apply.Enabled = $false
	}
}

function Remove-GMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectGMSAtoremove = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectGMSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectGMSAtoremove)
	{
		Remove-ADServiceAccount -Identity $SelectGMSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Remove-SSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectSSAtoremove = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectSSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectSSAtoremove)
	{
		Remove-ADUser -Identity $SelectSSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Modify-GMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	# MODIFY THE GMSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_GMSA_EnabledNo.Checked -eq $true)
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $false
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_GMSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_Description.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Description
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Description $textbox_GMSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_GMSA_FunctionalOwner.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Department
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Replace @{ "Department" = $($combobox_GMSA_FunctionalOwner.Text) }
		}
	}
	
	# DNS HOSTNAME
	If ($textbox_GMSA_DNSName.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_DNSName.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear DNSHostName
		}
		Else
		{
			Set-ADServiceAccount -Identity $gMSA -DNSHostName $textbox_GMSA_DNSName.Text
		}
		
	}
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_GMSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_GMSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_GMSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_GMSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_GMSA_DES.ForeColor -eq 'Green') -or ($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_GMSA_DES.Checked -eq $true) -or ($checkbox_GMSA_RC4.Checked -eq $true) -or ($checkbox_GMSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADServiceAccount -Identity $gMSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Modify-SSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA
	)
	
	# MODIFY THE SSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_SSA_EnabledNo.Checked -eq $true)
		{
			Set-ADUser -Identity $SSA -Enabled $false
		}
		else
		{
			Set-ADUser -Identity $SSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_SSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_SSA_Description.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Description
		}
		else
		{
			Set-ADUser -Identity $SSA -Description $textbox_SSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_SSA_FunctionalOwner.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Department
		}
		else
		{
			Set-ADUser -Identity $SSA -Replace @{ "Department" = $($combobox_SSA_FunctionalOwner.Text) }
		}
	}
	
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_SSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_SSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_SSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_SSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_SSA_DES.ForeColor -eq 'Green') -or ($checkbox_SSA_RC4.ForeColor -eq 'Green') -or ($checkbox_SSA_AES128.ForeColor -eq 'Green') -or ($checkbox_SSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_SSA_DES.Checked -eq $true) -or ($checkbox_SSA_RC4.Checked -eq $true) -or ($checkbox_SSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADUser -Identity $SSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
	
	# PASSWORD
	If ($textbox_SSA_Password.ForeColor -eq 'Green')
	{
		
		# ASK IF THE USER HAS RECORDED THE PASSWORD - LAST CHANCE
		If ($textbox_SSA_Password.Text -ne "")
		{
			$ConfirmRecordedPassword = Show-MsgBox -Prompt "Have you recorded the requested password?`r`n`r`nIt will not be available after changed." -Title 'Password Change Confirmation' -Icon Question -BoxType YesNo -DefaultButton 1
		}
		
		If ($ConfirmRecordedPassword -eq "Yes")
		{
			$sec_password = ConvertTo-SecureString $textbox_SSA_Password.Text -AsPlainText -Force
			Set-ADAccountPassword -Identity $SSA -Reset -NewPassword $sec_password
			Show-MsgBox -Prompt "The password has been changed" -Title "Success" -Icon Information -BoxType OKOnly
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			return
		}
		
	}
}

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}

	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
	Remove-GMSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA: $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						{
							$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}	
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	Remove-SSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove $SelectedSSA"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}

			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name
		
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found."
			}
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select

	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Group Managed Service Accounts were found."
		}
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name

		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}

		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Accounts were found."
			}
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Accounts were found."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}


function Search-DataGridView
{
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	If ($GroupManagedServiceAccount)
	{
		
		If ($FromStandardServiceAccount)
		{
			$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
			[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
			Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
		}
		else
		{
			Show-NewGMSAWizard_psf
		}
		
		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
		{
			# RELOAD THE GMSA ACCOUNT LIST
			Get-GMSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_GMSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-GMSAInfo
		}
	}
	elseif ($StandardServiceAccount)
	{
		# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
		Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text

		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
		{
			# RELOAD THE SSA ACCOUNT LIST
			Get-SSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_SSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-SSAInfo
		}
	}
	
}

#endregion


#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

$button_GMSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount
	
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
	
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$textbox_GMSA_DNSName_TextChanged={
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
	
}

$button_GMSA_Apply_Click = {
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE GMSA PROPERTIES
			Modify-GMSA -gMSA $SelectedGMSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE GMSA ACCOUNT LIST
		Get-GMSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)

		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
	
}

$button_GMSA_SPNAdd_Click={
	
	# ADD SPN
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	Show-GMSAInfo
	
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	If (Show-GroupPicker_psf)
	{
		If ($SelectedADObject)
		{
			Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	Show-GMSAInfo
	
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveMemberOf_Click={
	
	# REMOVE GMSA FROM SELECTED GROUP
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}


$contextmenustrip_GMSA_Remove_Click = {
	
	Remove-GMSA -Confirm:$false
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

#endregion Group Managed Service Account Tab


#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	Get-SSAToDGV
	
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
	
}

$button_SSA_Refresh_Click = {
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	Get-SSAToDGV
	Show-SSAInfo
	
}

$button_SSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -StandardServiceAccount
	
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
	
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$button_SSA_Password_Click = {
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 25 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 25
	
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
	
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
	
}

$button_SSA_Apply_Click = {
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE SSA PROPERTIES
			Modify-SSA -SSA $SelectedSSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE SSA ACCOUNT LIST
		Get-SSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			Show-SSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_SSA_RemoveMemberOf_Click = {
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-SSAInfo
	
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}

$contextmenustrip_SSA_Remove_Click = {
	
	Remove-SSA -Confirm:$false
	Get-SSAToDGV
	Show-SSAInfo
	
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
}




#endregion Standard Service Account Tab

$tabcontrol_ServiceAccounts_SelectedIndexChanged={
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
	}

}
$button_ServiceAccounts_About_Click={
	
	Show-MsgBox -Title "About" -Prompt "Created by:`r`n`r`n$Author`r`n$AuthorEmail" -Icon Information -BoxType OKOnly
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
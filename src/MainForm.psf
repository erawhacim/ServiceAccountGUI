<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>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
W9Ym65hmj5ls8wOSj8dMJs3O19k3lcnzc5mMm/05zlrfkqm+TWWO7VvWt2eqJ2Om1rtn5vpWmbFv
PZNj9p703o49Gfs2lam+JTPVt8pU35I5tm95XD05d98qU31LZu56S6aut6Xebr3ekpnrWzL32bdk
+jV5bN+yv/qWr++zb2Om9y2Zu7ze1nrb+9Yzmd+5+pb17plsD+lbnq++jZmMW31buya39m0uk/Xq
vZ263nKcs98AZFI5eCaTg+ZfHqbybwLyJ4jsSza5bJcyfVvPr42zlsn+u87kuKdm8nzP9O1UJvvW
xsm+cZxsD8lkzDFT27lMn9fWTJ5fymT/Q2Qyt8r0bWXq/JbG6Zns25Kp8frjQzIZs2f6Mecyfbt1
nDy/lMn+h8hkbkuZOr/K9O1cZm2cPq/++JBMxhwztZ3L9HltHSfPL42T/Q+RydyWMnV+h2T6dirT
53VIJtvKJN8zmddapm+XxumZPH9MJjcfeU0+6w1AVQ5cJ6SUUkqph6u8Jtfr89lvAJRSSin1+OpO
bwC+/P3fgEoppZR63PX15jV79+eJNwD55o9//LXf3dxJ5G5CKaWUUo+7Pt3U759OvAHIN6YyiFJK
KaWeSP3/+n3yDYBSSimlnmZtvgG4uHjx2z/f97ffoJRSSqmnXZ+/7fdvfv51/Qbg+fMfPrz75Xp/
9frd/uqVUkoppZ5yvX1/vf/xp5frNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbPHv2L868JrxSrtETAAAAAElF
TkSuQmCC</Preview>
  <Form>k+4R1c7G4lIBACODCAAAAAAABADtfemToki39/eKqP/BmC/3udeJUUAU3piZCDYRcQMEhS8TbAKK7LjF/ePf
RO2e6iq1xLKqq/t2P89UlUsmJzN/Z82TJ/8cGnPbzNK/Hx8qlT8PLyrZNrL/+k3appm9/GPiBVa4
Tv9oh8ny8PP3yqmPfq8odpJ6YfBX44968b/fK1TuZ3li/xXYeZbo/u+VUW74nsnb23G4sIO/jFZL
R020CeFIw65j+G+VQF+CJ89Af5KdrDzTJkwzzIMs/a1iup5vJaDVb1QYZEnop7/tiQZkj5IwspNs
e2xO5Fkombpv90PL/u3vQRjYf9a+fOdMG8r37CCTvB1ogGHw75VmA321UTFuMkwsO5GyrQ9atr2N
bdGe7ofOq405Mwy+jAB8SnqBnmz/JgiCJAiGcDhi/48jqAYjEETbKV74wnhhDig35IvPaNnnxHbx
RWr/XYdw2OL3eoe62zVBPD6Adjt5YVEE3xp2hoviQ0artwcC6DFVsV6NZdrFm9SU5CbTPnh2MAEv
Nchh1LqZZOBvcSz7jKCIjceHaQ5bFkIqG3HW6arEoEUorTa2UvmNxmxMPeR6+kYlrc5G4EKVzNqB
xWhtkWxvBH7oEdOUNnOHm0cT2Vm4jw+uSEoUEURul7KrrdWsZkP+dKXbKxux0rCGjOajIKhuq6NZ
CqM43EK17W4CL6JFFMuEJKC8MOBMn2MXQ2nx+EBTdFcSfWIR9bcOJQSaQHbHaQheb5l+SNl4oGd2
pqa9ycgRWERT/Czzs+l0qluQ0ja2k7QtDeGq7SfB+PFhnCD1dqOuhsZ0ia443ZMVimXI0QTNJ2aV
IleCbi1C3hVqi6DGA9hrHZmXkyyglzqUIYNRU65K7oqAU9N+fKjvuggSLUy9u5BpcsWOqvUZW6th
C1z0u9JqNGRGScInXk/3eqZjCMuoNurEgRzSsRIvg7HNrqrC0F/z7oJ+fCCXDmS0qtkI05o2m8Wh
2iCbXG3g6/Zs7DS8rrJstZqo32rJ04lgRE078Whz1mm62ao7WHVGlNgKELiO91D88WE77fKDpRJg
kKEIQp2udzALVvvsQu0vt3m4UVvjIewnVUFGjIipVuNOAlGb2ZZdsSISV2exDWNMvWbWuFX++NC0
d/IA8EBCQT1pN1LCpgSFHImP3Ync50hFgTYkHanu0lilYTYdBBieLLeLBg7ttmatI2WsI8ITdCSu
7RWYN20FL1w+qw6iZGviaTuDhDzKjapke12Eo5ssGnGCGU/FaujkHRq2dwalCEbPDqLVQDBYK8s0
ON5hPN97fLD5BQQkTWs8i2R+k9aCzOaD1BmEnWQ5HvQJbbJtJXaG2INGt4vOdd6YO4Tf0pdVYzbD
sbSfRT2pjmSCEeuPD8vAGWiQUMUaWzQYo7jNBnWRbRA63KwhY5EwBka6iNXZbCdBBBaYpjzbtlDd
qzX6a3szqwXJqFbzt8YQE+HHB44PBVvGeSNBlAHtKr1Wi5PwupvlQ2RA4dZ2PkEdOOq1pd5KsuRe
D3VYsokRPXzcD5ZQvN3WNnA8A7jYkI8PWWzyi5m9iFtNu8PTkxW9sde7pRoog6wqdXy5qa17douY
hVMVihMxRPwIp1zXixatFkvoXb62gtEYQfLEenzwV43qFGmFoZKIkWbFba0f6KgyGjURZTXylz1o
UdNRbYKZztwYDAJUI9xJptp2TYy52ozjkCBp5V4cV1fK48PcY7KltsTElRCqApmRwnQhdOTFut1s
tsUlo04z3BekNutV54HbyKYippoGsRbkjTz0JqvBfOsqDK/B8lx7fKjN7DGB6qHPYbNgQ89EdGGr
9rDDzuk0pmQP6szIoarFPMsQiJbCuu0bRr0+nMR8lYznK2IZVBtr3BbWde/xYdCgdQvHfBKLhfF4
ga5YzRPkOkFLyyq2iGweCb2BSm3JTcMhG253EkWTFUyQCeo3Gn1hhTYIujmsLqWaXn18qLb4Ocp7
3R1Bb911fU6udWll2/aqbXhyrROGVREZ8FIrUZHpnNM4mqXbpmmLzpqNZiNNmy5XvVCHQ2kYrh8f
FkkHx5PNZMCJOUHlw5GmmhThYHpLkxuDRb+968V2c4a0mjgEZeP1Mmek2GHkaeC4I4HGq8ulBVkT
TFmR9ccHw5oLEtZjdL8hWH6V0Nb9cFZ1XDThrVVah41OutNbMyvjAYJzyteW46E/c4FoSJNkIxOI
hfR5YYQvtnXo8QGeLWs1bz6s56aNazi2nmNqh5On0/oOJproSslaNDQeLPvMTE3aEKIZvabrZg1v
apnsmmgCgTxfOcR4NdkBhGy7bX2CMJtaQ1oOpi18oEBTH3I64101qlYJuifbM13pNwN5bmOm2ckd
qa1vln67NpxPhhTtkA4dxw0X4/UJWAUp0BtmSHhxtbrMt4TSEedxt97yt5v5qrYmAqovKluKNVJ5
nqv9DlnTqtOg0+/r4tBaRt1c62pUF3Wm4Q7o01Rop7VRtpKT9rRpNRsLY5Z2NvJoVN/F2GKI2c5I
c0yzGpnVXqM9t3pqY+C0e6Gigr+oRaO120g+ikt4TgFJPu1mNXXY7TRnXGwktt4B+mtdtWcLLIQ3
YwcGnK+pqzx3UqqDwFW+l+R9iJW5gN6qdcXvp3QY89l82B3K/ccH1lslQZAPZxhXg52wJymwl5Ah
JC3TFWDomlsbrxbBimF0tUnxXcjZ9mmnYw9j3sXqnmjrsZYi9FyKNi0ge7WkGtVq7nyxQekNsVTk
HRlFEk/RHLupMkh3PLbFfEXxC7q+MVWXnZnGIE6TCUGTItYMmSFM9+hd1YRMUwJrCi8FFxoJZKs9
c1OpFasCSi2nzHiUwKgxxTQTsiwYmTgTL5oH08TmFmbTWxKaro0Nou7gTW8+JmJHIaZbYDmsGxAu
IBI+QpAVo2EcxbZ7fIMI7TQW+hobxZPNag6A7hACORnEU9KuzTDfXnQWxBpDTAMet6p8RCSSZAKJ
FI78rDkXEmWTDlm7Vpu6UcavMVwRx0iN5rIoCW1diauBNO6l8yYE1YKBzvuteDjajhro2uAmkOTC
cFsCCGn6ueDWl/LI3eUx0VNGzZ3d6hI60eU0mYNjh1oHQpeS56RPN4NxM3FgHXMW43EH6UHozLcW
bieZ9mKlPQQI0VEcCB6LlWpykqDzppvABNdnNVd3xg1vQvGCu0aYHbRboxGtizazyUBjifPras/S
oknNjpMVLagYk04fHyyZx0Sa65CWXBs2BYjhmWQQ6TiON7FBOw5tOsfaIc9ufXdipmm2okV9sNo1
46a/Yuh8MZhIrTFJ972wD6zBXYfhId1ch7RWsLHZnTqQb22wtOnPGGpmrCN1LtYQSfWmQcgN6/hc
Sewhsg5HoUTmoiZCod5b16dDvsk9Pgj61hsSPp1u1mit08+CcbXRoLZNNQ3lRLK4HdpQY7rJOPZO
4KWd4zfokItBXzkJocLYQOazGh5l9W5jDfDmtrEOrcsIDeSvqXhNAAt0OSEDhk+p7m4ej4QmE5Nu
dSmMfXSpEE1hTaMkxQkra6vmDXeBA8uwiscDXAQSqYUwTUVorlh0NRXSmZ7N1uO1TEc00Y9DRVbz
CFpwmLwdtqlpv8suN+qqC7FbIezMOoDRXGYgmyo3qdZjGshedY4tkHQ7N2eT6qLukY1gvGWEqjde
OOqW3tpObOS1mTUYrpBtwsUJDglb0R7PKTESu1uB621gMR6pZDxYdx8fvE5n7bScvjPqIVMk0HVj
XR+SBMbnUYb3F90NEaZWfYJrYn+JDboOM5tSmlkfNeY8IXt8tkXDVgtI+LXM+EDXQy1gQQyxAeku
WksTOGs7d6D22tEgD2jda9A83Vgus35HWNGS2uVX4TxcUiTZ4vmQ2XAGIcoLn23UPD4F8zYattrj
nJ0xOykDUFFxhqdIzqx2I6SJpduVtw3S/jCYbISapztKDsF8wCYtgHiT9ZrOlFmK9Z4ur3aDgfj4
ICXYzBaFMeAWIh55tbCtOv28Gva7A00exWPYoVVBmzjsLpeN1QgdbtmQrQcm0x1X83ak9RE9jZXR
uks0248PwLbYmsSIBHKcmqLLkMB6OS2EYuzgVaZtJmC+guU8VKLQ7vd6eWjslqwlDcekqqW1oTmb
egtz3IEEVfQBeqe6x0k8t2ZmCg135V3H7S837S4GKUq9uu6zGJm43EwjPRV28FV3K2MzCneztDoC
7tUGcySGFtuySVHxqtDOS7a1RmRo0J03w7446Xdk1eWYEbuNqnWRSrwmE2L9qhJMu9SCTCODd7ie
uOlX1XZA1Gm2hy9QyyKGnGSA3qyd3J9Xwx7ZHbTzlludtqtTC+92/aQxrNq2uYbzDgX0ZzKajent
YK0JVGNqjro9q5Vx2q7vKR5rrnMK39pA9hqKb43AcraydqdZj71cnJo7j2F2cdt2YM5iZZpuQ1XB
84LNIp6xvRaReQgmQzreIHtNQlZ5hoWkGt9hW8Br66mQw3d7PY9RlrJY61Jte7qehLQeNbqcx6kt
e52uvc4u8dV8HuETf6ELwyGCoByvOkqvl4ljVSOI7tKXAd6qfXFHwLIwqgacnxuL2razZYycZICm
JEOYpP1M6a3krR3P5oDGXU/W8xmy2+2axtDY8eZqRrJ1r40PGyyw8HvSBAnMGaxYNJvUWvPMnnA7
mYCVSQpZwwDbJLHDrX2/awucMh1HK1bHfbIHQ06337Q3MjDL09RV5EEL8Gm31tfNWGCF4RSmpe5o
mmzXKgEnkZZ3bNnviY6h+R4b7zpAXEkEjEokLLErJ1xMNqmprVY5C4Q6H/oQ13l86FeHFIbVggCh
Ri1iofKt+Yjvh85EZOM5onE6OrbNRjXqG+pk7lLmdpdZaKSMgr5TQ8X6Ytai+TY857CUBVom07Ra
rQGlwZpaS9slt8oWbmIx0VBQB2xtR2Ep1txC7fqcale7gbUEazIUWiNBhDc9EW23acVnNrOGE/aF
IdD1NSwcGCzBwXMB6sOz3aY1w3qLMa6k3WV13caplVkdWLNJbhAO0FnLCY3mwxaKNoY43WjTTRVL
JFEkaDoBMsQk6R5AockJshWZOI/xabKaZTmySNYcPckgZFwXTDnfsCpQN3IAD3Svk9SBHNvRUg2a
VyW2sxyJKjXWHaBPc6Pf0LBhUNMlxjfFesNo0E6L8rqZgA3FjbOER1rXYoaE0uVaZDMlUjWaioLj
wGGWTZKqbntRM69O46yw8CfTXjTx0mqn3qOm3FwOImwn4AQ/mTebkmVLfr9loI3ItQN9s6kF0URb
aLVEhTB13vFSAjI7C3pn4eiIY4AVrY05h7DGSrppNAR/OpoOl8nEHFvyMEqwpUcYWleUJjKFaB1N
VyaDDr+IJ83U4tHZDs6N9WwBzwl9BzWMEeCFfFAbK9v1nBE5YC87wmRt2MEwn625eJPygq8Dzne6
G1EJt30saBqr9aZD+sQWqdUWarjWzf5QGYJpRJno8QGi5mTQ50azVj2jJHEXphrvExu8rfbqM4Gy
x5lgkxO0YzZGc3+3sCWd2yatHnCaB40YSPksQizPT6fDvgk4yxnZRr2xHDKQD1XtCYbaQluC8Njo
rflRd2c2ModwuiMcU5yIpfX+mEUdiRSGfhwTK3GsiZrhL7az8Vp3gIXfyGQNQmWS6Kk1JMFqsLDg
aoORw5GcMTBX5mY7tXt9Z7Xkdg7lQvGoQ0EGteNGKDlP6zOKWSqtebsLGwIBaJv0qxOkoxrDnZzW
3RrwdPHmNuNGndagGa/6AjLQld6Qms4bC30gNBu0r8O+CuFtXorWdVnzeggxmA+G4rCPA9lbI1Oi
3XQYnzDkueu5o0YGTYmEWkcp6wPzQO0psigxukMR25Wyopgs7wxZUY+otTFoStCWmpg1kvHCngCk
pUCqrgKR5oiHu0J7BHR8S8icGgJ3dz3W8foCRSSTbiwQOzKdDtSmYlNEiGPwLLXXYVflWui2O+do
otcr/IWG5jgkr1RDube18QU1MFLedRsRoRKLIVD3kbmRZyYfD3FP6nSYhaxviggHDXyR8abeEGa7
YZVkJoWPDeRbh8ZbgyXmunHh1xPAOInro129tU7HfLwKl/PVCuWnccitSZlthd543VkTE6Oxmm34
JtwLtq5L0I4duRtgRQ9qO6zfrIpLbj4joR7SUG1MAZK9z5FNLoV7ENYfGL3Jlu0z1ZnlZkGNNNcL
eSqReNDU4GTV6Ar00uTHzDYB2jmIupOdv6D6WW9OCtk0Jj0en+MbJwYPbQtDWPJxvNWT8Do53k42
PYUF7ok/Mbh+zWJHW7FjIrCG8q0lDOwQtk4aqsSgUrtF9FAg5Ne1zdI11zVsvRtP4IydLyW/ro1Q
QiO6Mr1ls1EAJVPTt90RoYqLvD6BYV3mFzMTcD2hGV6DohtrD95u0RHud2Qbq5GCofsUSkNuhhJd
pzWIcda1m8Dx8cN5lvY0dj7pBa22pI2HVJuvpwq6MbTHh8gaxkzHH/WZPCAdB5lXqaoQ24Khrq1t
fWVxSO4NOjuoreMuve6qZg/OYUaTtRomS5Hn+UY/mg1jjVMcYOF7uLCaMGR14KMrVhVxD67no5rr
TL2IbG1NzMSmo40QD9eQQlLCSMX66Qpl6DYVpsCjt4cW6bmqy6/bYgo8yp6ZT5ZW3N5SzeV6mLNe
POm3ranHRSLKSh3M24RrKaI8UmzAOS1tzJG7Tp3mxEeaAJHbjTHZiOnGqdUsG2gZhl0j8Rpnxs0l
M0z6YsfezuAaTAXEnMpqsKflqCmHliGYruE2uG4UCVuCM6pe38YFXHCG0XQZyRmq1hpAL+S7EeHZ
xIyGrKaidEYE2w13ZnXqxrNel3A6jLvpyq04jTo7KWKoPKkxRiTUHT8PtT40F6jxVGV626SvLQBn
UYud2epwbRR4X2SSr21L4Viiv173NR61pKjXYeRxpgtdlLIgf5EytTqTp1K3u+ZgpR96zVBn+g1C
rkUcsLieRbNfxL6/RL7leBDV1gNWanXdaKe0Nusisk92RRllkkXXcZy//vqzdtxmOG5JvLZH0dc3
3tLb2WS4+e3vtu6nr2+kDMDP3/4+sYPzasti84VNvOi4l9LxrNefJmV6ko3C1Mu8YjeFsoPMTiQz
se3g1bZje5P99veRysp5MpkV6PXYphfq1snR/VN88mdt/90vDV/fTSPzLAuDd99PM/aP+ec5yYQR
5tmljbUTm1ZL3bH//fjffStPIYfius6zTljAbiDJLiM7h90s8A9oJrX4PcNquLt/ZzqQxDpHJGnD
bArFG2IgyBD4NrV5fJivV5gqyMXbXZNxNRNgmU774GWLJkxrFbNFk24sySKp0O4o0XqWBA02bB94
ZhCLUcluvRlRS369BF6G2aad0YaqxxvS10TBW2ROatnIINYRr83GrLisLtiBovht3vW7bIYtDM5H
gmXAosHYg2ZbJxlC+lpF0NYMWFZMX7MH5nS0Ilu20Rrhu2WnU4NqHaMeyebECTqjOFK6IasuFCip
DlBtbcv5fLFgdh3DnYXKNA9VYFhCKhoCTWfUd81OwxJtC/A4QjNTqTaRtcFsTUuuiunB1A+gOBtb
Q76dm3OYs1Esd2gk3VH5CuI3uGQDd6g2b5IekIrrOdyghrOdKErQjEPHO92Wu/ONPsugVqKHK2eY
VFWO6yAezjXzjsrG4SzW3WqHYZQFXDXqsbsVBj0r4SOg6XJFsl0+AJp9mE0knWggJsUSCObSswYF
TxEUZpss3KP6A2gsW6FCZMpo24oNfjRKlywvA3+Sp8LdtEa5LrBefGQTjuckzSS6syNhoIpdlgX+
e0drL9jFgO/FljJO7S2cq85wvF0Di1IeUmo9nM2UBbvrrLURxRk9VXbsx4f2NBgAzw9qD0ZW0hmO
+0a3j0FOVQNO/Jbd1Tmsvw2tnEx4TdPogNr2qITrpAzadhd+oELDIT6NWWC90A7wp3Qn2uLIkpsp
PXnTWXWY1EPpDp853bjWj/PWKG5vpp6RELnjzWF1zGs7otocc5s4yBWF7rGxCxH4GB4b9A7opmaw
9eQxHDPacOwyXWKBDvisLS8pNDPykQbx8+GyxsUtPdbERjbe7uItYuZNS55pyXgLow1z7aEhIHAA
rJeNvMmQ1tSM0XSd8VU3Z03cUbxeWh9vg1zLIqvj2s5Qwae6oE3XeTKB5tKWniiD1jRInPFA8nkN
4bWZuQE+C+qQuwXlu/Pc47KxM7aaXRbq8Z36CiNdgl3zUjJauHuGJCRZGYo8SgHEPNccJ3THS2HR
C039IJexRuv3CnJFk4P2uCSvrujksIsPg0fCL/fwT+gB3eACywYaDmrVr/i+nNpUuIzA0AzfLpSI
aIPmiRc4v/09TvKXSutkF4qX5rq/13Wkbi6o0A+T8+2f6iAKiPzF5Un6Z/+dZ+qodtBH12snMDFH
jfDuGirTDfPwqOcDKqef/oUc/nsFgq9G3PnnX4M32wczaVtHFF2DoWOiSRNQ2YRb5UDaxF5DyDcE
Ua4eOLZ1aYz/nGrwLXquBcwI2AcfgZYIPOfFMNi+RFzGyyXENIC8OIWYC5g5S8VV3Yx0y9pLDQQI
x8P/r2r3BTwQAE8duqrJv/A5hc5ztjGbhHlU6esBGKZVedVSvoek+4Rmc7Ge/1CJrWf2wF6/hq9L
CGs1Cn4/OepXVOG3NFzZwwEnOIAJfBpYl8VM49o2e6wciKtcT115ZFzUg9/O0CkFuO/gWyX4efEm
2rPETt23oK2Jwm9B25GCj8Da1S32SCtH2DgM/bEX/VYBbQs7zQJvAYD9VomScOUBuw2oE/CVzIte
WB5fnlTxvTSrhLPKDfLwY3B/JPS+qN+Plgw37457p3iQEW4OYznYIgWCS2MfEGYfJ/PYoEDMlevy
hHGAIj7lOJznmzMjuLIP0XPcbBz27FlWZCuX4jisUZgtJ03CyzxXQr7rhpSF0bkA4CVWvcgwlR5g
q3PdfUqhLOkrm2aVLKQk5XV0XrQEmvVCUp5D2TXy+SkxV3dzAE0LvSCmL4PmeooPCGA2UZhkf/zx
x9XtbpGPr0vIp7N1TkyeFJRXYZHWM51NPEvx7PW7I9JyVk/lzC1AJHw/XIOJTsYhYVkioPIyd1/s
gQZkZPYbOxkWpyjAQufLIH1tqc/3ItopAPhNpBRnRkDbIwmHkyOgZ8r2/XOa/cQpEvDtbw6EnDx7
crb1/tkdWwftU9qe6QAgRY/Hvr5tDJpzQZrpgWnTdmomXpSFSWVpL43CpCmOkBAEXSv+EYdo3v7w
x/5vCh/b00Fdm9RzeaksDVaZW6y/Mjx0oE0gT5t2u8ZSW8mwstUn7VSfRu7+84W7MljRNx1z39d4
2c40YUOayMA3Jt3UllHXmMhdAd644L2hOoF8ShlEGoy6VkfZakI01idWrk5FyFzKW2oBFe180xdR
k5UFEVZy8OxIrbe3GqJk2gStm2uGJATwH9HnaGWAmojoGxIq21PSn0B1lii2GAg5VxFxZToqXbxS
oK/fm+oTdGEg1q630FbmEtr1KHICnrHTJ3g+Ggt5n2qse3Mi5ZgBZHT2dOHGUoGsTtc1qLUjdxTP
YP25BCuowuKJNmng6txE1LEyH4zVzXDcr2tjojEU1GLCCd6/8OyFCOax3TGX/kJZ+r5VB/PGbsZW
x081Qd0fxKHb2kqfCE5vOagbCBfygro/0kNuUbBG+JanFvsNFcpJ/3qJiFO84TnBEoi53/7ue5bl
24WRcRaQp3p4IoCP0qVU83Z4eLaZhGk4yyqSHqSFIeDNfq9gf8BoVI6aJxbeQbxeMPBO9/DVOHsy
sA4wwPzCCLutpydEfe2pNF2TRI8OUuey4CqU1EvGfy5ZbhI5HbugvJCCR/F3lIklegsyMO6+HeRS
Bgg7IbOAp2IDVQWswEMT89AEQDRPiybHGF7t1gH9Epu/xOYnE5sHQfVJpObrfvHpLk6JzWNfvbtI
TsCNC+Bl3igzLxqM9xWZ38QJIPzqdn0glryjyV7SOD04f8/s/qtbi0C6DwN/W9KsBlb0US8Ad6zY
6ixL9ddVPqq13PdBnyWJP0Y5YBx4rNDpvYtTzZ64rOjpHZJ9q2+cxieqsB/mqX30Ip9N+z+nv3fK
mzztlb7o797OaE837PffsfWLpxwG0vb8zE7I7U2e6NHGKAnO1wXk75W00P9/kaFv3cbbcON6vB04
9MSclAQ62gIy5bbITIlW+8jMgcIKuf1/52JwPxb+fib0wTB2F/yVRB+C34o+9PTG+Wvouzf0qHBp
hB+xZWEWD/oa8H+LACwo07PMCxwm0IGWtUpi8YnIKnQkciqZ5BJmTo+kJHAgtNiFuKBozyLnHMRv
RUCBro8AQOG0Ppu1t+0IwC34luU7QUfZtcML3NxkWl3f5g2bsEc9lbn2YR/W0FPbqoTB/p3/+qrF
/qvoa//M68y9Aij/pka9nMV/nnzhSuvsh9pmPc6RZ7+SYXdqOW92T99xw7Z+zhO7Zsf238kotfna
gBHAOtg5PrhlH+2Om68OGNkXpgAjO6trX4foSA8+wKKLiqcc1uOLKnyjRIWAOdMqK1FfklFWoCLA
eGtc/9grt1c/oeFdYplutr3fzfq+BB3A1udX4grr+zXg3Oj+XcTOeQ1+dm/+QOU5wXDGCLsKiqJu
eeEHZWgkxbOe7vUfx6Veo9ou46BZhPhKA+ECQeURUWTUncvUuYyI8oAoR+BbjLpD7KuShZXD3FT0
w0clHn9jnsgPDelBeBuiKdc2F6+6lq9xwgUHrywrnM1yexdOKEP3V4Or5FQdOKjUuO7DQLSXfigH
PY9qH6D11ZU6v+L/fPvV0xHzZ71/dRCu6f/5l8/E5E9GFm4NOBVD+pCAU/Ggr/4KwUgw2nybeQzh
hbGBn0sQPxsvOkFISQN5H6g6z8nn+fhclus5bixJ3R34kbBWxS6jBdSamWyjYqYrUqYHlp5Ylf8A
ev67Aih68umHpkU+Y9VTS3kVk77Coif7vYY5fzwuhGDsHlzYuh7ZZ7gQEPJRXFjCs/3ChWWo+xgu
BBR9Vi4EpL0LFxb9/oRcSDPSG1kQgW+JE72g4qP4r2wKfhnS7sB8RS78acajC8b7jEwHCLs/xxWd
/oTsJlKNe7DbG+1OQMVHsVsJ+/FwPLEEaXdgN9Fb2WlWobzItZNKo/If8PzPyWWAsPtzWdHpe3LZ
d4ipf1m5MaDqqgjmj5LVAhX7MdgbklqezU3ZfZn6zektzRLb48fQ+lf9tyf13oku3+HwIxFF/k0Z
Ll/zWsqljz7ZjWnss6HKGmgviC+rMS4dZr8El+tzgo8OUini3qIz5MjSMzut6Ild8ZZL2/KKmg36
rEihiBI7Tb3AqZQj532Oa+5p+AlSY/dI/MlEeIk8rxcSvHijJBs2kJuTEst6SgV1P0tKYh7sc+91
f7gObk+OLQqdFad7Dyn8Uu449tkz+5d7kMI8MUEfxaF/DszD9dr7fhmSEAKwhF1vnh89j0sTWxLM
cOvyPtp5NJdIsH2DgmCCL7l2/46zsh/of6UVyyuO6AExXZg19lL3/IpuWYXauE7On7DlL03ttfs5
Z7P6LvdePr/vKn7/Lgmot6qZZ6xR4jTTgTVeEPHeh5KectEtKasl2ryBiy6XPbkwTz8U6CR9eRzS
veBX4hTBCfx9S89nR+LZ6js/imn79uX/zEZuGePxhZV7IxKPYQqoeaPBWzZIIRH9J2Te2/D9LjKJ
Hkj3EkZw2Qj1KUI+TJyUwMtdzEMwvkonTC9qs1fNv1Mz9mar72Sn72TsfbjQ/XJ8/aryeD+WxG2+
IazwZFpKclxRCu0mYVv2wOMTEn/4A7dvkLKfGYEQXNb/eTknZeF3a3Cr7K5kIa9/Hi3/Nin4TNOj
1+cm9fVNzw6czAX8X9pAPDeED7MRPua85sFG0CvWvyOszMKD1XDRMb6PFfHvU+9sSTzp+GexJu4U
JP6s8hwru2N4fmpK+3D1G+V6idyRQx2FZ2HaEvL9tuPK3+dSkGtudrgEhwYC7DwEurbk8VFgf/v8
K9tecRvIeeA0oOLWmta1VduvSVH4hPd2HIIko8EtAueb8qptb2Nbkhc4/i3bQecv/LiIiW+GcHXz
ay/7uICNIn8FRt857P3NpXijxAtMLwLCpRh9WvkPGHH63++dG/Ap01/AyEV7Ga6u8nouZrPA+y3A
867GNfksX6kp0ctVtb9vc3nP4ag0jfc5EpfsH7u3ONOjNK6AGSs+Kt77XiflTlQl/7KM51NdzpiT
V7HJdypLfp1gP2FLlq5KfrGP6+uSX+ymRGXyi/1cX5v8vJVdrjr5y37K1Sc/0f5N5YJf6e/KMpMv
e3m95m/lV9XfX1V/X2DiFLuWrft7wkAtVfn3Fte4dIelq/+e82purP97obuSFYBf9nR1DeDKNVWA
K+frAF+y6S7dGHSqZYlawOeswafqtkTjK7MdTjQsWw74wqKXKQh8zo5FcPTywdmL3vKlTJObza3v
k4UzGgBj6a1OSQv4wmWm8lT6zZ6Q0usIF1sgF8LZt7m17xPSPu0W773i/67ogXX0NoqsyGudgvMB
58N8vhZrfgtev48XfTNarzxHctH3RpHzVyKex/nLEZSG+f4Iy42VvUq73eUIvI/PDTC/d64/q59d
8NK7ONkfn3j3Bh76zEX3irS38hWmXkxMadZswrcX3UNLtfvCnAWTlKy6d/P+/PcI7RNpCvwo2yrO
fuRAdd50ivUzBfpfDOjHCPuX2PA/QPM4zEr5cf5MoX7Aoc8X/K32NdxA3x70P0HXR4b/IbRU9b0P
tkQKsapXzOO8VMKksi/xXNFT8Hb01WDXi4AsQPh+lyBLPPu4T7A85qREepqugeT5BEbLieX+mbYJ
GMvLblIUvzYOfvCNg1/x+l/x+k8Zr7/mgtOPDdhfecnpdfH66645vS5Yf/1Fp5dC9q+Js/vH7O+9
g/lLlv2SZZ9Slv3ae3y1u59m77FMRPueW48nTfj/s5uRcP18vvnHb0Z+h7jJIZXt3qGTu+RLnibt
Y6Mn5UPFH5o+KZ5ImnwRTvkEYZHTS1k6MvJDBdT7e2txOPvR4+hfxvFjhM/LHvE9jK5SYng/WdS8
DEw/Ilr+Ktz+T0bJn2zN7zfuKwR9OJj5CYT7k0X72WLdb2OOXyHus918xhD3r8jSr8jSr8jSr8jS
r8jS7ZGlG6y3XwGlnzCgdC+v4o6BpO/jWPwYAaQvrsUsCZffRpM+kZ/x7TLeI3j04q2Xb3y+4NKz
Nfzny11Nr7HaLSGiy+Ghc5Rc1dW1UaLTPIkVFz0066eTJcsmV57mw693YD0reXTaP3k7E1wBtT0n
fshppS8rXCqOeQFh+1Iu9XNi/BWYvR6EPBNGhArJjZ3LqL0Ak9Y5ZXyizeHm4UuWxyuRx7Plfz6b
fpfKRwwvxQvxN1wQI10ZLLxJo1/S56Uv0rwQJrxTZPm82pSujc7durHy4ZE56YbA3NvDcncJyt0n
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
AQA=</Form>
  <Code><![CDATA[
$formServiceAccounts_Load = {
	
	$formServiceAccounts.Text = "Service Accounts $FormVersion"

	# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
	Show-GMSAInfo
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
	#Get-SSAToDGV
	
	# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
	#Show-SSAInfo

}

#region Control Helper Functions
function Add-SPNtoGMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] is already added to [$gMSA]" -Title "Already added" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{add="$ServicePrincipalName" }
				
				If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
				{
					return $true
				}
				Else
				{
					Show-MsgBox -Prompt "Failed adding [$ServicePrincipalName] to [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
		else
		{
			Show-MsgBox -Prompt "Please enter a SPN" -Title "Failure" -Icon Information -BoxType OKOnly -DefaultButton '1'
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Remove-SPNfromGMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If (!($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName"))
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] was not found added to [$gMSA]" -Title "Not found" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				$Confirmation = Show-MsgBox -Prompt "Remove [$ServicePrincipalName] from [$gMSA]`?" -Title "Remove SPN?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
				
				If ($Confirmation -eq "YES")
				{
					Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{ remove = "$ServicePrincipalName" }
					
					If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
					{
						Show-MsgBox -Prompt "Failed to remove [$ServicePrincipalName] from [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-GMSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$gMSA] from [$Group]?" -Title "Remove gMSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $gMSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $gMSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$gMSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-SSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$SSA] from [$Group]?" -Title "Remove SSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $SSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $SSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$SSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Add-PrincipalsAllowedToRetrievePassword
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToAdd
	)
	
	Try
	{
		$CumulativePrincipals = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		$CumulativePrincipals += (Get-ADObject -filter { Name -eq $PrincipalToAdd }).DistinguishedName
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $CumulativePrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-PrincipalsAllowedToRetrievePassword
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToRemove
	)
	Try
	{
		# REMOVE PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		
		# GET THE CURRENT PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		$CurrentPrincipalName = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		
		# GET THE DISTINGUISHED NAME OF THE SELECTED PRINCIPAL
		$SelectedPrinicipalName = $(Get-ADObject -Filter { Name -eq $PrincipalToRemove }).DistinguishedName
		
		# GET ONLY CURRENT PRINCIPALS THAT DO NOT MATCH THE SELECTED PRINCIPAL
		$DesiredPrincipals = $CurrentPrincipalName -ne $SelectedPrinicipalName
		
		# APPLY ONLY THE REMOANING PRINCIPALS
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $DesiredPrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Add-GMSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$gMsaAcctObj = Get-ADServiceAccount $gMSA
		Add-ADGroupMember -Members $gMsaAcctObj.SID.Value -Identity $Group

	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Add-SSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$SSAAcctObj = Get-ADUser $SSA
		Add-ADGroupMember -Members $SSAAcctObj.SID.Value -Identity $Group
		
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Test-GMSAPropertyChange
{
	If (($textbox_GMSA_Description.ForeColor -eq 'Green') -or
		($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_GMSA_DNSName.ForeColor -eq 'Green') -or
		($checkbox_GMSA_DES.ForeColor -eq 'Green') -or
		($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_GMSA_Apply.Enabled = $true
	}
	else
	{
		$button_GMSA_Apply.Enabled = $false
	}
}

function Test-SSAPropertyChange
{
	If (($textbox_SSA_Description.ForeColor -eq 'Green') -or
		($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_SSA_Password.ForeColor -eq 'Green') -or
		($checkbox_SSA_DES.ForeColor -eq 'Green') -or
		($checkbox_SSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_SSA_Apply.Enabled = $true
	}
	else
	{
		$button_SSA_Apply.Enabled = $false
	}
}

function Remove-GMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectGMSAtoremove = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectGMSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectGMSAtoremove)
	{
		Remove-ADServiceAccount -Identity $SelectGMSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Remove-SSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectSSAtoremove = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectSSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectSSAtoremove)
	{
		Remove-ADUser -Identity $SelectSSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Modify-GMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	# MODIFY THE GMSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_GMSA_EnabledNo.Checked -eq $true)
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $false
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_GMSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_Description.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Description
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Description $textbox_GMSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_GMSA_FunctionalOwner.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Department
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Replace @{ "Department" = $($combobox_GMSA_FunctionalOwner.Text) }
		}
	}
	
	# DNS HOSTNAME
	If ($textbox_GMSA_DNSName.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_DNSName.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear DNSHostName
		}
		Else
		{
			Set-ADServiceAccount -Identity $gMSA -DNSHostName $textbox_GMSA_DNSName.Text
		}
		
	}
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_GMSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_GMSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_GMSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_GMSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_GMSA_DES.ForeColor -eq 'Green') -or ($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_GMSA_DES.Checked -eq $true) -or ($checkbox_GMSA_RC4.Checked -eq $true) -or ($checkbox_GMSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADServiceAccount -Identity $gMSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Modify-SSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA
	)
	
	# MODIFY THE SSA PROPERTIES
	
	# PASSWORD
	If ($textbox_SSA_Password.ForeColor -eq 'Green')
	{
		
		# ASK IF THE USER HAS RECORDED THE PASSWORD - LAST CHANCE
		If ($textbox_SSA_Password.Text -ne "")
		{
			$ConfirmRecordedPassword = Show-MsgBox -Prompt "Have you recorded the requested password?`r`n`r`nIt will not be available after changed." -Title 'Password Change Confirmation' -Icon Question -BoxType YesNo -DefaultButton 1
		}
		
		If ($ConfirmRecordedPassword -eq "Yes")
		{
			$sec_password = ConvertTo-SecureString $textbox_SSA_Password.Text -AsPlainText -Force
			Set-ADAccountPassword -Identity $SSA -Reset -NewPassword $sec_password
			Show-MsgBox -Prompt "The password has been changed" -Title "Success" -Icon Information -BoxType OKOnly
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			return
		}
		
	}
	
	# ENABLED
	If ($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_SSA_EnabledNo.Checked -eq $true)
		{
			Set-ADUser -Identity $SSA -Enabled $false
		}
		else
		{
			Set-ADUser -Identity $SSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_SSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_SSA_Description.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Description
		}
		else
		{
			Set-ADUser -Identity $SSA -Description $textbox_SSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_SSA_FunctionalOwner.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Department
		}
		else
		{
			Set-ADUser -Identity $SSA -Replace @{ "Department" = $($combobox_SSA_FunctionalOwner.Text) }
		}
	}
	
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_SSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_SSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_SSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_SSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_SSA_DES.ForeColor -eq 'Green') -or ($checkbox_SSA_RC4.ForeColor -eq 'Green') -or ($checkbox_SSA_AES128.ForeColor -eq 'Green') -or ($checkbox_SSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_SSA_DES.Checked -eq $true) -or ($checkbox_SSA_RC4.Checked -eq $true) -or ($checkbox_SSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADUser -Identity $SSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}

	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
	Remove-GMSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA: $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						{
							$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}	
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	Remove-SSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove $SelectedSSA"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}

			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name
		
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found."
			}
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select

	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Group Managed Service Accounts were found."
		}
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name

		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}

		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Accounts were found."
			}
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Accounts were found."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}


function Search-DataGridView
{
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	If ($GroupManagedServiceAccount)
	{
		
		If ($FromStandardServiceAccount)
		{
			$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
			[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
			Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
		}
		else
		{
			Show-NewGMSAWizard_psf
		}
		
		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
		{
			# RELOAD THE GMSA ACCOUNT LIST
			Get-GMSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_GMSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-GMSAInfo
		}
	}
	elseif ($StandardServiceAccount)
	{
		# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
		Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text

		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
		{
			# RELOAD THE SSA ACCOUNT LIST
			Get-SSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_SSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-SSAInfo
		}
	}
	
}

#endregion


#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

$button_GMSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount
	
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
	
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$textbox_GMSA_DNSName_TextChanged={
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
	
}

$button_GMSA_Apply_Click = {
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE GMSA PROPERTIES
			Modify-GMSA -gMSA $SelectedGMSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE GMSA ACCOUNT LIST
		Get-GMSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)

		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
	
}

$button_GMSA_SPNAdd_Click={
	
	# ADD SPN
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	Show-GMSAInfo
	
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	If (Show-GroupPicker_psf)
	{
		If ($SelectedADObject)
		{
			Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	Show-GMSAInfo
	
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveMemberOf_Click={
	
	# REMOVE GMSA FROM SELECTED GROUP
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}


$contextmenustrip_GMSA_Remove_Click = {
	
	Remove-GMSA -Confirm:$false
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

#endregion Group Managed Service Account Tab


#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	Get-SSAToDGV
	
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
	
}

$button_SSA_Refresh_Click = {
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	Get-SSAToDGV
	Show-SSAInfo
	
}

$button_SSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -StandardServiceAccount
	
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
	
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$button_SSA_Password_Click = {
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 25 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 25
	
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
	
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
	
}

$button_SSA_Apply_Click = {
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE SSA PROPERTIES
			Modify-SSA -SSA $SelectedSSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE SSA ACCOUNT LIST
		Get-SSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			Show-SSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_SSA_RemoveMemberOf_Click = {
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-SSAInfo
	
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}

$contextmenustrip_SSA_Remove_Click = {
	
	Remove-SSA -Confirm:$false
	Get-SSAToDGV
	Show-SSAInfo
	
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
}




#endregion Standard Service Account Tab

$tabcontrol_ServiceAccounts_SelectedIndexChanged={
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
	}

}
$button_ServiceAccounts_About_Click={
	
	Show-MsgBox -Title "About" -Prompt "Created by:`r`n`r`n$Author`r`n$AuthorEmail" -Icon Information -BoxType OKOnly
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>
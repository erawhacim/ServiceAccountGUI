<File version="3.2">
  <FileID>2bc9c680-4c10-4126-aed3-3e74911357e3</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAKanSURBVHhe7J0FfF3l/f/5/+bCmLCxDZ/BGAMG
gzEGw70U6u6SptHGvfGkjUtjlUg17u7u7u524+75/J/n3Js2LSmU0UDTfN+v17vN8eecc+99Ps/R
ewiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIL41Tn3ve99JfeXf/07V1dVL1dM3TNXV0ydJkiRJ
csVokGpgYJwqLX0k9ef33ZfK6nbuF/Od7/xfwc6duxAclYTi+m5UtPSjvKmPJEmSJMkVZGXLAPIq
m2FrfwoPP/QgJNX8zXn55ZdTgyISkV/Xg8SCOiTk15IkSZIkucKMZyaXNAuNeWVl1S8PAPywf2mD
CElFDUgurCdJkiRJcoWaxMyr7UF4VMKXBwADA8PUuo5hYaIUFgJIkiRJklyZJjML6nsREhH75QFA
X98gtbZjCCnFTUgrIUmSJMk7x4yyZmbLMtksLCOd/Z1eugyy+QrzL13OdRAvY8FUZlFDH4LDY/73
AMBTRGJB/VWT2PDEQtaPKfy9aFhyUeN105IkSZLk1zWdVdDRGRW4FJKGi8HpuHRbTUNUerlQOYen
FCIgOh2BsZnMjNtjTAaC47NZq5zVn/l18A7PxMWgtCXK8b/Jt8eFoFS2jMLrttlXDgD8FEBqSbOw
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
+JdJ95dK369EcVExVNW1KM9PwfGoaMRnFqKmuhqqygppUC+FQj5rQCU/V3Z6Mi6npKFMGrCrpNdq
m4e2iPkS88cCQETdhgWAnkYtLS3y1jGxlaztw7PE16lpaUhLS0WK9HVycopmOlXcnyofT5MpJVX+
oC3t46Tb06THiO9PS2/7N1PekpeVkS5Na54nLT1dfh7N66UiXftc92978IO82rbeiflsjwWAiB4b
FgB6WtXV1ckDplqt1rmI+RLz1xELABE9NiwARD1HjygA4j4i6hk6FgAxTUS6RyyfOl0AxEELKpVK
3grQ/rEMw+hexJuF2OTYthyLf8UbjCgBYhMkwzC6k+rqavkUX50tAGJalACxJYBhGN2OeCMRmxXb
a2xslN9sxBsJwzC6FbF8djw4sM2vXgCIiIjoyWMBICIiegqxABARET2FnngBICIiol+fOKD3iRUA
cTRiQ0MDbt68yTAMwzDMrxRxcKC4jHDbGXjdXgDEBUPEKX8MwzAMw/y6EacJto3P3V4AxNo/wzAM
wzC6kSdWABiGYRiG0b089gJwUyoA4kkZhmEYhtHdNEp5LAVApEB6okKVFPEvwzAMwzA6nWva8fuR
C0COiNQkGIZhGIbR/bSN349cABiGYRiG6Zn5jwuAs/Oq+OZ7kL+BYRiGYZienRt3gZhz8f++AJiZ
mSefib2I6BNnpMbAMAzDMExPTsy5i9i0OfDfFwAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKix6FPn/8P
OrbNPBi0xGoAAAAASUVORK5CYII=</Preview>
  <Form>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
RFMBAA==</Form>
  <Code><![CDATA[
$formServiceAccounts_Load = {
	
	$formServiceAccounts.Text = "Service Accounts $FormVersion"

	# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
	Get-GMSAToDGV
	
	# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
	Show-GMSAInfo
	
	# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
	$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
	#Get-SSAToDGV
	
	# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
	#Show-SSAInfo

}

#region Control Helper Functions
function Add-SPNtoGMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] is already added to [$gMSA]" -Title "Already added" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{add="$ServicePrincipalName" }
				
				If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
				{
					return $true
				}
				Else
				{
					Show-MsgBox -Prompt "Failed adding [$ServicePrincipalName] to [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
		else
		{
			Show-MsgBox -Prompt "Please enter a SPN" -Title "Failure" -Icon Information -BoxType OKOnly -DefaultButton '1'
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Remove-SPNfromGMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ServicePrincipalName,
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	Try
	{
		If ($ServicePrincipalName -ne "")
		{
			If (!($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName"))
			{
				Show-MsgBox -Prompt "[$ServicePrincipalName] was not found added to [$gMSA]" -Title "Not found" -Icon Information -BoxType OKOnly -DefaultButton '1'
			}
			Else
			{
				$Confirmation = Show-MsgBox -Prompt "Remove [$ServicePrincipalName] from [$gMSA]`?" -Title "Remove SPN?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
				
				If ($Confirmation -eq "YES")
				{
					Set-ADServiceAccount -Identity $gMSA -ServicePrincipalNames @{ remove = "$ServicePrincipalName" }
					
					If ($(Get-ADServiceAccount -Identity $gMSA -Properties ServicePrincipalNames | Select-Object ServicePrincipalNames).ServicePrincipalNames -contains "$ServicePrincipalName")
					{
						Show-MsgBox -Prompt "Failed to remove [$ServicePrincipalName] from [$gMSA]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
					}
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-GMSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$gMSA] from [$Group]?" -Title "Remove gMSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $gMSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $gMSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$gMSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-SSAfromGroup
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		If ($Group -ne "")
		{
			$Confirmation = Show-MsgBox -Prompt "Remove [$SSA] from [$Group]?" -Title "Remove SSA?" -Icon Question -BoxType "YesNo" -DefaultButton '2'
			
			If ($Confirmation -eq "YES")
			{
				Remove-ADGroupMember -Identity $Group -Members $SSA -Confirm:$false
				
				If ($(Get-ADGroupMember -Identity $Group) -contains $SSA)
				{
					Show-MsgBox -Prompt "Failed to remove [$SSA] from [$Group]" -Title "Failure" -Icon Exclamation -BoxType OKOnly -DefaultButton '1'
				}
			}
		}
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Add-PrincipalsAllowedToRetrievePassword
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToAdd
	)
	
	Try
	{
		$CumulativePrincipals = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		$CumulativePrincipals += (Get-ADObject -filter { ( Name -eq $PrincipalToAdd ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group")) }).DistinguishedName
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $CumulativePrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
}

function Remove-PrincipalsAllowedToRetrievePassword
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$PrincipalToRemove
	)
	Try
	{
		# REMOVE PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		
		# GET THE CURRENT PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
		$CurrentPrincipalName = $(Get-ADServiceAccount -Identity $gMSA -Properties * | Select-Object PrincipalsAllowedToRetrieveManagedPassword).PrincipalsAllowedToRetrieveManagedPassword
		
		# GET THE DISTINGUISHED NAME OF THE SELECTED PRINCIPAL
		$SelectedPrinicipalName = $(Get-ADObject -Filter { ( Name -eq $PrincipalToRemove ) -and (( ObjectClass -eq "User" ) -or ( ObjectClass -eq "Group" )) }).DistinguishedName
		
		# GET ONLY CURRENT PRINCIPALS THAT DO NOT MATCH THE SELECTED PRINCIPAL
		$DesiredPrincipals = $CurrentPrincipalName -ne $SelectedPrinicipalName
		
		# APPLY ONLY THE REMOANING PRINCIPALS
		Set-ADServiceAccount -Identity $gMSA -PrincipalsAllowedToRetrieveManagedPassword $DesiredPrincipals
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}

}

function Add-GMSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$gMsaAcctObj = Get-ADServiceAccount $gMSA
		Add-ADGroupMember -Members $gMsaAcctObj.SID.Value -Identity $Group

	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Add-SSAGroupsToDGV
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA,
		[Parameter(Mandatory = $true)]
		[string]$Group
	)
	
	Try
	{
		$SSAAcctObj = Get-ADUser $SSA
		Add-ADGroupMember -Members $SSAAcctObj.SID.Value -Identity $Group
		
	}
	Catch
	{
		Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
	}
	
	
}

function Test-GMSAPropertyChange
{
	If (($textbox_GMSA_Description.ForeColor -eq 'Green') -or
		($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_GMSA_DNSName.ForeColor -eq 'Green') -or
		($checkbox_GMSA_DES.ForeColor -eq 'Green') -or
		($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_GMSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_GMSA_Apply.Enabled = $true
	}
	else
	{
		$button_GMSA_Apply.Enabled = $false
	}
}

function Test-SSAPropertyChange
{
	If (($textbox_SSA_Description.ForeColor -eq 'Green') -or
		($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green') -or
		($textbox_SSA_Password.ForeColor -eq 'Green') -or
		($checkbox_SSA_DES.ForeColor -eq 'Green') -or
		($checkbox_SSA_RC4.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES128.ForeColor -eq 'Green') -or
		($checkbox_SSA_AES256.ForeColor -eq 'Green') -or
		($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green'))
	{
		$button_SSA_Apply.Enabled = $true
	}
	else
	{
		$button_SSA_Apply.Enabled = $false
	}
}

function Remove-GMSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectGMSAtoremove = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectGMSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectGMSAtoremove)
	{
		Remove-ADServiceAccount -Identity $SelectGMSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Remove-SSA
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	$SelectSSAtoremove = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
	
	$Confirm = Show-InputBox -message "Enter the following to remove the account:`r`n`r`n$SelectSSAtoremove" -title "Confirm" -default "Type Account Name Here"
	
	If ($Confirm -eq $SelectSSAtoremove)
	{
		Remove-ADUser -Identity $SelectSSAtoremove -Confirm:$false
	}
	else
	{
		Show-MsgBox -Prompt "The entry does not match.  Aborting the removal." -Title "Aborting Removal" -Icon Information -BoxType OKOnly
	}
}

function Modify-GMSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$gMSA
	)
	
	# MODIFY THE GMSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_GMSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_GMSA_EnabledNo.Checked -eq $true)
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $false
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_GMSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_Description.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Description
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Description $textbox_GMSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_GMSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_GMSA_FunctionalOwner.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear Department
		}
		else
		{
			Set-ADServiceAccount -Identity $gMSA -Replace @{ "Department" = $($combobox_GMSA_FunctionalOwner.Text) }
		}
	}
	
	# DNS HOSTNAME
	If ($textbox_GMSA_DNSName.ForeColor -eq 'Green')
	{
		If ($textbox_GMSA_DNSName.Text -eq "")
		{
			Set-ADServiceAccount -Identity $gMSA -Clear DNSHostName
		}
		Else
		{
			Set-ADServiceAccount -Identity $gMSA -DNSHostName $textbox_GMSA_DNSName.Text
		}
		
	}
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_GMSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_GMSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_GMSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_GMSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_GMSA_DES.ForeColor -eq 'Green') -or ($checkbox_GMSA_RC4.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES128.ForeColor -eq 'Green') -or ($checkbox_GMSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_GMSA_DES.Checked -eq $true) -or ($checkbox_GMSA_RC4.Checked -eq $true) -or ($checkbox_GMSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADServiceAccount -Identity $gMSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
}

function Modify-SSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$SSA
	)
	
	# MODIFY THE SSA PROPERTIES
	
	# ENABLED
	If ($radiobutton_SSA_EnabledNo.ForeColor -eq 'Green')
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
		
		If ($radiobutton_SSA_EnabledNo.Checked -eq $true)
		{
			Set-ADUser -Identity $SSA -Enabled $false
		}
		else
		{
			Set-ADUser -Identity $SSA -Enabled $true
		}
	}
	
	# DESCRIPTION
	If ($textbox_SSA_Description.ForeColor -eq 'Green')
	{
		If ($textbox_SSA_Description.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Description
		}
		else
		{
			Set-ADUser -Identity $SSA -Description $textbox_SSA_Description.Text
		}
	}
	
	# FUNCTIONAL OWNER
	If ($combobox_SSA_FunctionalOwner.ForeColor -eq 'Green')
	{
		If ($combobox_SSA_FunctionalOwner.Text -eq "")
		{
			Set-ADUser -Identity $SSA -Clear Department
		}
		else
		{
			Set-ADUser -Identity $SSA -Replace @{ "Department" = $($combobox_SSA_FunctionalOwner.Text) }
		}
	}
	
	
	$EncryptionTypes = @()
	# DES
	If ($checkbox_SSA_DES.Checked -eq $true)
	{
		$EncryptionTypes += "DES"
	}
	
	# RC4
	If ($checkbox_SSA_RC4.Checked -eq $true)
	{
		$EncryptionTypes += "RC4"
	}
	
	#AES128
	If ($checkbox_SSA_AES128.Checked -eq $true)
	{
		$EncryptionTypes += "AES128"
	}
	
	#AES256
	If ($checkbox_SSA_AES256.Checked -eq $true)
	{
		$EncryptionTypes += "AES256"
	}
	
	If (($checkbox_SSA_DES.ForeColor -eq 'Green') -or ($checkbox_SSA_RC4.ForeColor -eq 'Green') -or ($checkbox_SSA_AES128.ForeColor -eq 'Green') -or ($checkbox_SSA_AES256.ForeColor -eq 'Green'))
	{
		If (($checkbox_SSA_DES.Checked -eq $true) -or ($checkbox_SSA_RC4.Checked -eq $true) -or ($checkbox_SSA_AES128.Checked -eq $true))
		{
			$Confirm = Show-InputBox -message "THIS IS NOT RECOMMENDED: You have selected one or more less secure encryption types.`r`n`r`nCancel to change, or enter the following to continue (case-sensitive):`r`n`r`n`tThisIsUnsafe" -title "Confirm Weak Encryption Type(s)"
		}
		else
		{
			$Confirm = "NA"
		}
		
		If (($Confirm -ceq "ThisIsUnsafe") -or ($Confirm -eq "NA"))
		{
			Set-ADUser -Identity $SSA -KerberosEncryptionType $($EncryptionTypes -join ",")
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled, or input value doesn't match.`r`n`r`nPlease try again." -Title "Aborting Change" -Icon Information -BoxType OKOnly
		}
	}
	
	# PASSWORD
	If ($textbox_SSA_Password.ForeColor -eq 'Green')
	{
		
		# ASK IF THE USER HAS RECORDED THE PASSWORD - LAST CHANCE
		If ($textbox_SSA_Password.Text -ne "")
		{
			$ConfirmRecordedPassword = Show-MsgBox -Prompt "Have you recorded the requested password?`r`n`r`nIt will not be available after changed." -Title 'Password Change Confirmation' -Icon Question -BoxType YesNo -DefaultButton 1
		}
		
		If ($ConfirmRecordedPassword -eq "Yes")
		{
			$sec_password = ConvertTo-SecureString $textbox_SSA_Password.Text -AsPlainText -Force
			Set-ADAccountPassword -Identity $SSA -Reset -NewPassword $sec_password
			Show-MsgBox -Prompt "The password has been changed" -Title "Success" -Icon Information -BoxType OKOnly
		}
		else
		{
			Show-MsgBox -Prompt "Operation canceled" -Title "Aborting Change" -Icon Information -BoxType OKOnly
			return
		}
		
	}
}

function Remove-GMSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedGMSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedGMSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_GMSA_Properties.Text = "Properties:"
	$contextmenustrip_GMSA_Remove.Text = "Remove"
	$contextmenustrip_GMSA_Remove.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesTextboxes = @()
	$AllGMSAPropertiesTextboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	$AllGMSAPropertiesCheckboxes = @()
	$AllGMSAPropertiesCheckboxes += $groupbox_GMSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesTextbox in $AllGMSAPropertiesTextboxes)
	{
		$EachGMSAPropertiesTextbox.tag = ""
		$EachGMSAPropertiesTextbox.text = ""
		$EachGMSAPropertiesTextbox.Forecolor = 'Black'
		$EachGMSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE GMSA PROPERTIES GROUPBOX
	foreach ($EachGMSAPropertiesCheckbox in $AllGMSAPropertiesCheckboxes)
	{
		$EachGMSAPropertiesCheckbox.tag = $false
		$EachGMSAPropertiesCheckbox.checked = $false
		$EachGMSAPropertiesCheckbox.Forecolor = 'Black'
		$EachGMSAPropertiesCheckbox.Enabled = $true
	}

	# CLEAR THE DROPDOWN IN THE GMSA PROPERTIES GROUPBOX
	$combobox_GMSA_FunctionalOwner.Tag = ""
	$combobox_GMSA_FunctionalOwner.Text = ""
	$combobox_GMSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_GMSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SPN TEXTBOX
	$textbox_GMSA_SPNAdd.Text = ""
	
	# CLEAR THE GMSA INORMATION DATAGRIDVIEWS
	$dgv_GMSA_SPN.DataSource = $null
	$dgv_GMSA_EditMemberOf.DataSource = $null
	$dgv_GMSA_EditAssignedComputers.DataSource = $null
}

function Remove-SSAInfoControlValue
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	param ()
	
	# CLEAN UP EXISTING VARIABLES
	Remove-Variable -Name SelectedSSA -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	Remove-Variable -Name SelectedSSAAllProperties -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	
	$groupbox_SSA_Properties.Text = "Properties:"
	$contextmenustrip_SSA_Remove.Text = "Remove"
	$contextmenustrip_SSA_Remove.Enabled = $false
	$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA"
	$contextmenustrip_SSA_CreateGMSA.Enabled = $false
	
	# GET ALL OF THE TEXTBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesTextboxes = @()
	$AllSSAPropertiesTextboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "textbox" }
	
	# GET ALL OF THE CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	$AllSSAPropertiesCheckboxes = @()
	$AllSSAPropertiesCheckboxes += $groupbox_SSA_Properties.Controls | Where-Object { $_.GetType().Name -eq "checkbox" }
	
	# CLEAR EACH TEXTBOX IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesTextbox in $AllSSAPropertiesTextboxes)
	{
		$EachSSAPropertiesTextbox.tag = ""
		$EachSSAPropertiesTextbox.text = ""
		$EachSSAPropertiesTextbox.Forecolor = 'Black'
		$EachSSAPropertiesTextbox.Enabled = $true
	}
	
	# CLEAR EACH CHECKBOXES IN THE SSA PROPERTIES GROUPBOX
	foreach ($EachSSAPropertiesCheckbox in $AllSSAPropertiesCheckboxes)
	{
		$EachSSAPropertiesCheckbox.tag = $false
		$EachSSAPropertiesCheckbox.checked = $false
		$EachSSAPropertiesCheckbox.Forecolor = 'Black'
		$EachSSAPropertiesCheckbox.Enabled = $true
	}
	
	# CLEAR THE DROPDOWN IN THE SSA PROPERTIES GROUPBOX
	$combobox_SSA_FunctionalOwner.Tag = ""
	$combobox_SSA_FunctionalOwner.Text = ""
	$combobox_SSA_FunctionalOwner.SelectedIndex = "-1"
	$combobox_SSA_FunctionalOwner.Forecolor = 'Black'
	
	# CLEAR THE SSA INORMATION DATAGRIDVIEWS
	$dgv_SSA_EditMemberOf.DataSource = $null
}

function Show-GMSAInfo
{
	Remove-GMSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_GMSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedGMSA = $dgv_GMSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedGMSAAllProperties = Get-ADServiceAccount -Properties * -Filter { name -eq $SelectedGMSA }
			
			# LABEL THE GMSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_GMSA_Properties.Text = "Properties for gMSA: $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Text = "Remove $SelectedGMSA"
			$contextmenustrip_GMSA_Remove.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties))
			{
				# NAME
				If ($SelectedGMSAAllProperties.Name)
				{
					$textbox_GMSA_Name.Tag = $SelectedGMSAAllProperties.Name
					$textbox_GMSA_Name.Text = $SelectedGMSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedGMSAAllProperties.SamAccountName)
				{
					$textbox_GMSA_SamAccountName.Tag = $SelectedGMSAAllProperties.SamAccountName
					$textbox_GMSA_SamAccountName.Text = $SelectedGMSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Description))
				{
					$textbox_GMSA_Description.Tag = $SelectedGMSAAllProperties.Description
					$textbox_GMSA_Description.Text = $SelectedGMSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.Department))
				{
					$combobox_GMSA_FunctionalOwner.Tag = $SelectedGMSAAllProperties.Department
					$combobox_GMSA_FunctionalOwner.Text = $SelectedGMSAAllProperties.Department
				}
				
				# DNS HOST NAME
				If (-not [string]::IsNullOrEmpty($SelectedGMSAAllProperties.DNSHostName))
				{
					$textbox_GMSA_DNSName.Tag = $SelectedGMSAAllProperties.DNSHostName
					$textbox_GMSA_DNSName.Text = $SelectedGMSAAllProperties.DNSHostName
				}
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedGMSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_GMSA_DES.Tag = $true
						$checkbox_GMSA_DES.Checked = $true
					}
					else
					{
						$checkbox_GMSA_DES.Tag = $false
						$checkbox_GMSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_GMSA_RC4.Tag = $true
						$checkbox_GMSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_GMSA_RC4.Tag = $false
						$checkbox_GMSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_GMSA_AES128.Tag = $true
						$checkbox_GMSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES128.Tag = $false
						$checkbox_GMSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedGMSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_GMSA_AES256.Tag = $true
						$checkbox_GMSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_GMSA_AES256.Tag = $false
						$checkbox_GMSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedGMSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_GMSA_EnabledNo.Tag = $false
					$radiobutton_GMSA_EnabledNo.Checked = $false
					$radiobutton_GMSA_EnabledYes.Tag = $true
					$radiobutton_GMSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_GMSA_EnabledNo.Tag = $true
					$radiobutton_GMSA_EnabledNo.Checked = $true
					$radiobutton_GMSA_EnabledYes.Tag = $false
					$radiobutton_GMSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedGMSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_GMSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditMemberOf.Width)
						{
							$dgv_GMSA_EditMemberOf.Columns[$dgv_GMSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditMemberOf.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: ASSIGNED COMPUTERS			
				Try
				{
					# CHECK IF THE ACCOUNT HAS ANY ASSIGNED PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
					$ValuesPrincipals = $($SelectedGMSAAllProperties.PrincipalsAllowedToRetrieveManagedPassword) | Get-ADObject | Select-Object @{ n = 'Principals Allowed To Retrieve Managed Password'; e = { $_.Name } },
																																				@{ n = 'Object Class'; e = { $_.ObjectClass } }
					
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesPrincipals))
					{
						$ValuesPrincipals_DT = ConvertTo-DataTable -InputObject $ValuesPrincipals
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_EditAssignedComputers -Item $ValuesPrincipals_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						#If ($dgv_GMSA_EditAssignedComputers.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_EditAssignedComputers.Width)
						#{
						#	$dgv_GMSA_EditAssignedComputers.Columns[$dgv_GMSA_EditAssignedComputers.ColumnCount - 1].AutoSizeMode = 'Fill'
						#}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_EditAssignedComputers.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_EditAssignedComputers.DataSource = $null
				}
				
				# POPLATE DATAGRIDVIEW: SERVICE PRINCIPAL NAMES	
				Try
				{
					# CHECK IF ANY SPNS HAVE BEEN ASSIGNED
					If ([string]::IsNullOrEmpty($SelectedGMSAAllProperties.ServicePrincipalNames))
					{
						$ValuesSPN = $null
					}
					else
					{
						$ValuesSPN = $SelectedGMSAAllProperties.ServicePrincipalNames | Select-Object @{ n = 'Service Principal Names (SPN)'; e = { $_.ToString() } }
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If ($null -ne $ValuesSPN)
					{
						$ValuesSPN_DT = ConvertTo-DataTable -InputObject $ValuesSPN
						$dgv_GMSA_SPN.DataSource = $null
						Load-DataGridView -DataGridView $dgv_GMSA_SPN -Item $ValuesSPN_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_GMSA_SPN.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_SPN.Width)
						{
							$dgv_GMSA_SPN.Columns[$dgv_GMSA_SPN.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_GMSA_SPN.DataSource = $null
					}	
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_GMSA_SPN.DataSource = $null
				}
			}
			else
			{
				Remove-GMSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-GMSAInfoControlValue -Confirm:$false
	}
}

function Show-SSAInfo
{
	Remove-SSAInfoControlValue -Confirm:$false

	Try
	{
		If ($dgv_SSA_Select.Columns['Name'])
		{
			# GET THE SELECTED SERVICE NAME FROM THE SELECTION DATAGRIDVIEW
			$script:SelectedSSA = $dgv_SSA_Select.SelectedRows | ForEach-Object { $_.Cells['Name'].value }
			$script:SelectedSSAAllProperties = Get-ADUser -Properties * -Filter { name -eq $SelectedSSA }
			
			# LABEL THE SSA PROPERTIES BOX WITH THE SELECTED SERVICE ACCOUNT
			$groupbox_SSA_Properties.Text = "Properties for Service Account: $SelectedSSA"
			$contextmenustrip_SSA_Remove.Text = "Remove $SelectedSSA"
			$contextmenustrip_SSA_Remove.Enabled = $true
			$contextmenustrip_SSA_CreateGMSA.Text = "Create a gMSA from $SelectedSSA"
			$contextmenustrip_SSA_CreateGMSA.Enabled = $true
			
			# FILL ALL OF THE CORRESPONDING TEXTBOXES WITH THE GMSA PROPERTIES
			If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties))
			{
				# NAME
				If ($SelectedSSAAllProperties.Name)
				{
					$textbox_SSA_Name.Tag = $SelectedSSAAllProperties.Name
					$textbox_SSA_Name.Text = $SelectedSSAAllProperties.Name
				}
				
				# SAM ACCOUNT NAME
				If ($SelectedSSAAllProperties.SamAccountName)
				{
					$textbox_SSA_SamAccountName.Tag = $SelectedSSAAllProperties.SamAccountName
					$textbox_SSA_SamAccountName.Text = $SelectedSSAAllProperties.SamAccountName
				}
				
				# DESCRIPTION				
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Description))
				{
					$textbox_SSA_Description.Tag = $SelectedSSAAllProperties.Description
					$textbox_SSA_Description.Text = $SelectedSSAAllProperties.Description
				}
				
				# DEPARTMENT (FUNCTIONAL OWNER)
				If (-not [string]::IsNullOrEmpty($SelectedSSAAllProperties.Department))
				{
					$combobox_SSA_FunctionalOwner.Tag = $SelectedSSAAllProperties.Department
					$combobox_SSA_FunctionalOwner.Text = $SelectedSSAAllProperties.Department
				}
				
				
				# KERBEROS ENCRYPTION TYPE
				If ($SelectedSSAAllProperties.KerberosEncryptionType)
				{
					# DES
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*DES*")
					{
						$checkbox_SSA_DES.Tag = $true
						$checkbox_SSA_DES.Checked = $true
					}
					else
					{
						$checkbox_SSA_DES.Tag = $false
						$checkbox_SSA_DES.Checked = $false
					}
					
					# RC4
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*RC4*")
					{
						$checkbox_SSA_RC4.Tag = $true
						$checkbox_SSA_RC4.Checked = $true
					}
					else
					{
						$checkbox_SSA_RC4.Tag = $false
						$checkbox_SSA_RC4.Checked = $false
					}
					
					#AES128
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES128*")
					{
						$checkbox_SSA_AES128.Tag = $true
						$checkbox_SSA_AES128.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES128.Tag = $false
						$checkbox_SSA_AES128.Checked = $false
					}
					
					#AES256
					If ($($SelectedSSAAllProperties.KerberosEncryptionType) -like "*AES256*")
					{
						$checkbox_SSA_AES256.Tag = $true
						$checkbox_SSA_AES256.Checked = $true
					}
					else
					{
						$checkbox_SSA_AES256.Tag = $false
						$checkbox_SSA_AES256.Checked = $false
					}
				}
				
				# DISABLED / ENABLED
				If ($SelectedSSAAllProperties.Enabled -eq $true)
				{
					$radiobutton_SSA_EnabledNo.Tag = $false
					$radiobutton_SSA_EnabledNo.Checked = $false
					$radiobutton_SSA_EnabledYes.Tag = $true
					$radiobutton_SSA_EnabledYes.Checked = $true
				}
				else
				{
					$radiobutton_SSA_EnabledNo.Tag = $true
					$radiobutton_SSA_EnabledNo.Checked = $true
					$radiobutton_SSA_EnabledYes.Tag = $false
					$radiobutton_SSA_EnabledYes.Checked = $false
				}
				
				# POPLATE DATAGRIDVIEW: MEMBER OF	
				Try
				{
					# CHECK IF THE ACCOUNT IS A MEMBER OF ANY GROUPS
					If ([string]::IsNullOrEmpty($SelectedSSAAllProperties.memberof))
					{
						$ValuesMemberOf = $null
					}
					else
					{
						$ValuesMemberOf = $SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'Member Of'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } },
																							  @{ n = 'OU'; e = { ConvertFrom-DistinguishedName -ToOrganizationalUnit -DistinguishedName $_ } }
						
					}
					
					# LOAD THE VALUES TO THE DATAGRIDVIEW
					If (-not [string]::IsNullOrEmpty($ValuesMemberOf))
					{
						$ValuesMemberOf_DT = ConvertTo-DataTable -InputObject $ValuesMemberOf
						$dgv_SSA_EditMemberOf.DataSource = $null
						Load-DataGridView -DataGridView $dgv_SSA_EditMemberOf -Item $ValuesMemberOf_DT
						
						# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
						If ($dgv_SSA_EditMemberOf.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_EditMemberOf.Width)
						{
							$dgv_SSA_EditMemberOf.Columns[$dgv_SSA_EditMemberOf.ColumnCount - 1].AutoSizeMode = 'Fill'
						}
					}
					else
					{
						# CLEAR THE DATAGRIDVIEW
						$dgv_SSA_EditMemberOf.DataSource = $null
					}
				}
				Catch
				{
					# CLEAR THE DATAGRIDVIEW
					$dgv_SSA_EditMemberOf.DataSource = $null
				}

			}
			else
			{
				Remove-SSAInfoControlValue -Confirm:$false
			}
		}
	}
	Catch
	{
		Remove-SSAInfoControlValue -Confirm:$false
	}
}

function Get-GMSAToDGV
{
	Try
	{
		# GET AD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesServiceAccountList = Get-ADServiceAccount -filter * -Properties $ADServiceAccountProperties | Select-Object Name,
																														   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																														   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																														   @{ n = 'Functional Owner'; e = { $_.Department } },
																														   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																														   @{ n = 'Description'; e = { $_.Description } },
																														   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																														   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name
		
		# SAVE THE UNIQUE 'DEPARTMENT' PROPERTIES, TO BE USED TO UPDATE COMBOBOXES
		$script:AvailableFunctionalOwners = $($ValuesServiceAccountList | Where-Object { $_.'Functional Owner' }).'Functional Owner' | Sort-Object -Unique
		
		# UPDATE THE COMBOBOX WITH THE UNIQUE FUNCTIONAL OWNERS
		If ($AvailableFunctionalOwners)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
			Update-ComboBox -ComboBox $combobox_SSA_FunctionalOwner -Items $AvailableFunctionalOwners -Confirm:$false
		}
		
		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_GMSA_FilterBy -Items $($ValuesServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}
		
		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_GMSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesServiceAccountList
			$dgv_GMSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Group Managed Service Accounts were found."
			}
			$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_GMSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_GMSA_Select.Width)
		#{
		#	$dgv_GMSA_Select.Columns[$dgv_GMSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_GMSA_Select

	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Group Managed Service Accounts were found."
		}
		$ValuesServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_GMSA_Select -Item $ValuesServiceAccountList_DT
	}
}

function Get-SSAToDGV
{
	Try
	{
		$SearchBase = $textbox_SSA_AccountSelectOU.text
		
		# GET AD STANDARD SERVICE ACCOUNTS AND COLLECT PROPERTIES
		$ADStandardServiceAccountProperties = "Name", "Department", "Created", "Modified", "KerberosEncryptionType", "Description"
		$ValuesStandardServiceAccountList = Get-ADUser -filter * -Properties $ADStandardServiceAccountProperties -SearchBase $SearchBase -SearchScope OneLevel | Select-Object Name,
																																											   @{ n = 'SAM Account Name'; e = { $_.SamAccountName } },
																																											   @{ n = 'Enabled'; e = { $_.Enabled.ToString() } },
																																											   @{ n = 'Functional Owner'; e = { $_.Department } },
																																											   @{ n = 'AES256 Only?'; e = { $($($_.KerberosEncryptionType) -eq "AES256").ToString() } },
																																											   @{ n = 'Description'; e = { $_.Description } },
																																											   @{ n = 'Created'; e = { $_.Created.ToString("yyyy/MM/dd HH:mm:ss") } },
																																											   @{ n = 'Modified'; e = { $_.Modified.ToString("yyyy/MM/dd HH:mm:ss") } } | Sort-Object Name

		# UPDATE THE COMBOBOX WITH THE PROPERTY NAMES FROM THE SERVICE ACCOUNTS
		If ($ValuesStandardServiceAccountList)
		{
			Update-ComboBox -ComboBox $combobox_SSA_FilterBy -Items $($ValuesStandardServiceAccountList | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) -Confirm:$false
		}

		# SELECT THE DEFAULT ITEM IN THE COMBOBOX AS "NAME"
		$combobox_SSA_FilterBy.SelectedItem = "Name"
		
		If ($null -ne $ValuesStandardServiceAccountList)
		{
			# LOAD THE VALUES TO THE DATAGRIDVIEW
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $ValuesStandardServiceAccountList
			$dgv_SSA_Select.DataSource = $null
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		else
		{
			# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
			$NoValuesFound = new-object psobject -Property @{
				Message = "No Accounts were found."
			}
			$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
			Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
		}
		
		# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
		#If ($dgv_SSA_Select.Columns.GetColumnsWidth('Displayed') -lt $dgv_SSA_Select.Width)
		#{
		#	$dgv_SSA_Select.Columns[$dgv_SSA_Select.ColumnCount - 1].AutoSizeMode = 'Fill'
		#}
		
		Format-DataGridview -DataGridViewName $dgv_SSA_Select
	}
	Catch
	{
		# CLEAR THE DATAGRIDVIEW AND DISPLAY MESSAGE
		$NoValuesFound = new-object psobject -Property @{
			Message = "No Accounts were found."
		}
		$ValuesStandardServiceAccountList_DT = ConvertTo-DataTable -InputObject $($NoValuesFound | Select-Object "Message")
		Load-DataGridView -DataGridView $dgv_SSA_Select -Item $ValuesStandardServiceAccountList_DT
	}
}


function Search-DataGridView
{
	param
	(
		[Parameter(Mandatory = $true)]
		$DataGridview,
		[Parameter(Mandatory = $true)]
		$DataGridViewFilterBy,
		[Parameter(Mandatory = $true)]
		$DataGridviewFilter
	)
	
	$bs = New-Object System.Windows.Forms.BindingSource
	$bs.DataSource = $DataGridview.DataSource
	$filter = @()
	
	If (($null -eq $DataGridViewFilterBy) -or ($DataGridViewFilterBy -eq "Search all..."))
	{
		foreach ($column in $DataGridview.Columns)
		{
			$filter += "[" + $column.Name + "]" + " like '%" + $DataGridviewFilter + "%'"
		}
	}
	elseif ($DataGridviewFilter -eq "")
	{
	}
	elseif ($null -ne $DataGridviewFilter)
	{
		$filter += "[" + $DataGridViewFilterBy.ToString() + "]" + " like '%" + $DataGridviewFilter + "%'"
	}
	
	$bs.Filter = ($filter -join " OR ")
	$DataGridview.DataSource = $bs
	
	# EXPAND THE LAST COLUMN TO FILL THE DATAGRIDVIEW
	If ($DataGridview.Columns.GetColumnsWidth('Displayed') -lt $DataGridview.Width)
	{
		$DataGridview.Columns[$DataGridview.ColumnCount - 1].AutoSizeMode = 'Fill'
	}
}

function Show-NewServiceAccountForm
{
	param
	(
		[switch]$StandardServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$GroupManagedServiceAccount,
		[Parameter(ParameterSetName = 'GMSA')]
		[switch]$FromStandardServiceAccount
	)
	
	If ($GroupManagedServiceAccount)
	{
		
		If ($FromStandardServiceAccount)
		{
			$tabcontrol_ServiceAccounts.SelectedTab = $tabpage_ServiceAccounts_GMSA
			[array]$Groups = $($SelectedSSAAllProperties.memberOf | Select-Object @{ n = 'DistinguishedName'; e = { ConvertFrom-DistinguishedName -DistinguishedName $_ } }).DistinguishedName
			Show-NewGMSAWizard_psf -Name $($textbox_SSA_Name.Text) -Description $($textbox_SSA_Description.Text) -MemberOf $Groups
		}
		else
		{
			Show-NewGMSAWizard_psf
		}
		
		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewServiceAccountCreated))
		{
			# RELOAD THE GMSA ACCOUNT LIST
			Get-GMSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_GMSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-GMSAInfo
		}
	}
	elseif ($StandardServiceAccount)
	{
		# OPEN THE NEW GROUP MANAGED SERVICE ACCOUNT WIZARD TO CREATE ACCOUNT IN THE CURRENT OU
		Show-NewSSAWizard_psf -OU $textbox_SSA_AccountSelectOU.Text

		# IF THE ACCOUNT WAS CREATED SUCCESSFULLY
		If (-not [string]::IsNullOrEmpty($NewStandardServiceAccountCreated))
		{
			# RELOAD THE SSA ACCOUNT LIST
			Get-SSAToDGV
			
			# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
			$dgv_SSA_Select.Rows |
			ForEach-Object{
				If ($_.Cells['Name'].Value -eq $($NewStandardServiceAccountCreated.Name))
				{
					$_.Selected = $true
				}
			}
			
			# SCROLL TO THE SELECTED ROW
			$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
			
			# REMOVE THE VARIABLE THE WAS CREATED IN THE WIZARD TO STORE THE NEW ACCOUNT PROPERTIES
			Remove-Variable -Name NewStandardServiceAccountCreated -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
			
			# SHOW THE PROPERTIES OF THE NEW ACCOUNT
			Show-SSAInfo
		}
	}
	
}

#endregion


#region Group Managed Service Account Tab

$button_GMSA_Refresh_Click = {
	
	$combobox_GMSA_FilterBy.Text = "Name"
	$textbox_GMSA_Filter.Text = ""
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

$button_GMSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount
	
}

$dgv_GMSA_Select_Click = {
	
	# SELECT THE GMSA AND SHOW THE PROPERTIES
	Show-GMSAInfo
	
}

$dgv_GMSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
	
}

$textbox_GMSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_GMSA_Select -DataGridViewFilterBy $combobox_GMSA_FilterBy.Text -DataGridviewFilter $textbox_GMSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_GMSA_Select
}

$textbox_GMSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_GMSA_Description.Text -ne $textbox_GMSA_Description.Tag)
	{
		$textbox_GMSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$combobox_GMSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_GMSA_FunctionalOwner.Text -ne $combobox_GMSA_FunctionalOwner.Tag)
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_GMSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_GMSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$textbox_GMSA_DNSName_TextChanged={
	
	# DNS HOSTNAME TEXT CHANGED
	If ($textbox_GMSA_DNSName.Text -ne $textbox_GMSA_DNSName.Tag)
	{
		$textbox_GMSA_DNSName.ForeColor = 'Green'
	}
	else
	{
		$textbox_GMSA_DNSName.ForeColor = 'Black'
	}
	
}

$textbox_GMSA_DNSName_ForeColorChanged = {
	
	# DNS HOSTNAME FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_DES.Checked -ne $checkbox_GMSA_DES.Tag)
	{
		$checkbox_GMSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_RC4.Checked -ne $checkbox_GMSA_RC4.Tag)
	{
		$checkbox_GMSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES128.Checked -ne $checkbox_GMSA_AES128.Tag)
	{
		$checkbox_GMSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$checkbox_GMSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_GMSA_AES256.Checked -ne $checkbox_GMSA_AES256.Tag)
	{
		$checkbox_GMSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_GMSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_GMSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-GMSAPropertyChange
	
}

$radiobutton_GMSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_GMSA_EnabledNo.Checked -ne $radiobutton_GMSA_EnabledNo.Tag)
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_GMSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_GMSA_EnabledYes.ForeColor = 'Black'
	}
}

$radiobutton_GMSA_EnabledNo_ForeColorChanged = {
	
	Test-GMSAPropertyChange
	
}

$button_GMSA_Apply_Click = {
	
	If (($checkbox_GMSA_DES.Checked -eq $false) -and ($checkbox_GMSA_RC4.Checked -eq $false) -and ($checkbox_GMSA_AES128.Checked -eq $false) -and ($checkbox_GMSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE GMSA PROPERTIES
			Modify-GMSA -gMSA $SelectedGMSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE GMSA ACCOUNT LIST
		Get-GMSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_GMSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedGMSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_GMSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_GMSA_Select.SelectedRows[0].Index)

		Show-GMSAInfo
	}
}

$textbox_GMSA_SPNAdd_TextChanged = {
	
	# ADD SPN TEXT CHANGED
	If ([string]::IsNullOrWhiteSpace($textbox_GMSA_SPNAdd.Text))
	{
		$button_GMSA_SPNAdd.Enabled = $false
	}
	else
	{
		$button_GMSA_SPNAdd.Enabled = $true
	}
	
}

$button_GMSA_SPNAdd_Click={
	
	# ADD SPN
	If ($(Add-SPNtoGMSA -ServicePrincipalName $textbox_GMSA_SPNAdd.Text -gMSA $textbox_GMSA_SamAccountName.Text) -eq $true)
	{
		$textbox_GMSA_SPNAdd.Text = ""
	}
	
	Show-GMSAInfo
	
}

$button_GMSA_SPNRemove_Click = {
	
	# REMOVE SPN
	Remove-SPNfromGMSA -ServicePrincipalName $($dgv_GMSA_SPN.SelectedRows | ForEach-Object { $_.Cells['Service Principal Names (SPN)'].value }) -gMSA $textbox_GMSA_SamAccountName.Text -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_AddAssignedComputer_Click = {
	
	# OPEN GROUP PICKER AND ASSIGN THE GMSA TO THE SELECTED GROUP OR COMPUTER
	# AS PRINCIPALS ALLOWED TO RETRIEVE MANAGED PASSWORD
	If (Show-GroupPicker_psf)
	{
		If ($SelectedADObject)
		{
			Add-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToAdd $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveAssignedComputer_Click = {
	
	Remove-PrincipalsAllowedToRetrievePassword -gMSA $SelectedGMSA -PrincipalToRemove $($dgv_GMSA_EditAssignedComputers.SelectedRows | ForEach-Object {
			$_.Cells['Principals Allowed To Retrieve Managed Password'].value
		}) -Confirm:$false
	
	Show-GMSAInfo
	
}

$button_GMSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE GMSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-GMSAGroupsToDGV -gMSA $SelectedGMSA -Group $SelectedADObject
			Show-GMSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_GMSA_RemoveMemberOf_Click={
	
	# REMOVE GMSA FROM SELECTED GROUP
	Remove-GMSAfromGroup -gMSA $($textbox_GMSA_SamAccountName.Text) -Group $($dgv_GMSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-GMSAInfo
	
}

$button_GMSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_GMSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_GMSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_GMSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_GMSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}


$contextmenustrip_GMSA_Remove_Click = {
	
	Remove-GMSA -Confirm:$false
	Get-GMSAToDGV
	Show-GMSAInfo
	
}

#endregion Group Managed Service Account Tab


#region Standard Service Account Tab

$textbox_SSA_AccountSelectOU_TextChanged = {
	
	Get-SSAToDGV
	
}

$button_SSA_AccountSelectOU_Click = {
	
	# OPEN THE OU PICKER TO SELECT A HOME FOR THE NEW ACCOUNT	
	$NewOU = $(Invoke-OUPicker_ps1 -HideNewOUFeature).DistinguishedName
	
	If ($NewOU)
	{
		$textbox_SSA_AccountSelectOU.Text = $NewOU
		Remove-Variable -Name NewOU -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
	}
	
}

$button_SSA_Refresh_Click = {
	
	$combobox_SSA_FilterBy.Text = "Name"
	$textbox_SSA_Filter.Text = ""
	Get-SSAToDGV
	Show-SSAInfo
	
}

$button_SSA_CreateNew_Click = {
	
	Show-NewServiceAccountForm -StandardServiceAccount
	
}

$dgv_SSA_Select_Click = {
	
	Show-SSAInfo
	
}

$dgv_SSA_Select_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	
	# REFORMAT THE DGV AFTER RESORTING BY COLUMN HEADER CLICK
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Filter_TextChanged = {
	
	# FILTER TEXT CHANGED
	Search-DataGridView -DataGridview $dgv_SSA_Select -DataGridViewFilterBy $combobox_SSA_FilterBy.Text -DataGridviewFilter $textbox_SSA_Filter.Text
	Format-DataGridview -DataGridViewName $dgv_SSA_Select
	
}

$textbox_SSA_Description_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Description.Text -ne $textbox_SSA_Description.Tag)
	{
		$textbox_SSA_Description.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Description.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Description_ForeColorChanged = {
	
	# DESCRIPTION FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$combobox_SSA_FunctionalOwner_TextChanged = {
	
	# FUNCTIONAL OWNER TEXT CHANGED
	If ($combobox_SSA_FunctionalOwner.Text -ne $combobox_SSA_FunctionalOwner.Tag)
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Green'
	}
	else
	{
		$combobox_SSA_FunctionalOwner.ForeColor = 'Black'
	}
	
}

$combobox_SSA_FunctionalOwner_ForeColorChanged = {
	
	# FUNCTIONAL OWNER FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$textbox_SSA_Password_TextChanged = {
	
	# DESCRIPTION TEXT CHANGED
	If ($textbox_SSA_Password.Text -ne "")
	{
		$textbox_SSA_Password.ForeColor = 'Green'
	}
	else
	{
		$textbox_SSA_Password.ForeColor = 'Black'
	}
	
}

$textbox_SSA_Password_ForeColorChanged = {
	
	# PASSWORD FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$button_SSA_Password_Click = {
	
	# CREATE A RANDOM COMPLEX PASSWORD WITH 25 CHARACTERS
	$textbox_SSA_Password.Text = GenerateStrongPassword -PasswordLength 25
	
}

$checkbox_SSA_DES_CheckedChanged = {
	
	# DES ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_DES.Checked -ne $checkbox_SSA_DES.Tag)
	{
		$checkbox_SSA_DES.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_DES.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_DES_ForeColorChanged = {
	
	# DES ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_RC4_CheckedChanged = {
	
	# RC4 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_RC4.Checked -ne $checkbox_SSA_RC4.Tag)
	{
		$checkbox_SSA_RC4.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_RC4.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_RC4_ForeColorChanged = {
	
	# RC4 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES128_CheckedChanged = {
	
	# AES128 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES128.Checked -ne $checkbox_SSA_AES128.Tag)
	{
		$checkbox_SSA_AES128.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES128.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES128_ForeColorChanged = {
	
	# AES128 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$checkbox_SSA_AES256_CheckedChanged = {
	
	# AES256 ENCRYPTION TYPE CHECKED CHANGED
	If ($checkbox_SSA_AES256.Checked -ne $checkbox_SSA_AES256.Tag)
	{
		$checkbox_SSA_AES256.ForeColor = 'Green'
	}
	else
	{
		$checkbox_SSA_AES256.ForeColor = 'Black'
	}
	
}

$checkbox_SSA_AES256_ForeColorChanged = {
	
	# AES256 ENCRYPTION TYPE FORECOLOR CHANGED
	Test-SSAPropertyChange
	
}

$radiobutton_SSA_EnabledNo_CheckedChanged = {
	
	If ($radiobutton_SSA_EnabledNo.Checked -ne $radiobutton_SSA_EnabledNo.Tag)
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Green'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Green'
	}
	else
	{
		$radiobutton_SSA_EnabledNo.ForeColor = 'Black'
		$radiobutton_SSA_EnabledYes.ForeColor = 'Black'
	}
	
}

$radiobutton_SSA_EnabledNo_ForeColorChanged = {
	
	Test-SSAPropertyChange
	
}

$button_SSA_Apply_Click = {
	
	If (($checkbox_SSA_DES.Checked -eq $false) -and ($checkbox_SSA_RC4.Checked -eq $false) -and ($checkbox_SSA_AES128.Checked -eq $false) -and ($checkbox_SSA_AES256.Checked -eq $false))
	{
		Show-MsgBox -Prompt "No Encryption Types were selected.  Please select atleast one encryption type." -Title "Missing Encryption Type" -Icon Information -BoxType OKOnly
	}
	else
	{
		Try
		{
			# MODIFY THE SSA PROPERTIES
			Modify-SSA -SSA $SelectedSSA
		}
		Catch
		{
			Show-MsgBox -Prompt $($Error[0].Exception.Message) -Title "Error" -Icon Exclamation -BoxType "OkOnly" -DefaultButton 1
		}
		
		# RELOAD THE SSA ACCOUNT LIST
		Get-SSAToDGV
		
		# SELECT THE ROW OF THE NEWLY CREATED ACCOUNT
		$dgv_SSA_Select.Rows |
		ForEach-Object{
			If ($_.Cells['Name'].Value -eq $SelectedSSA)
			{
				$_.Selected = $true
			}
		}
		
		# SCROLL TO THE SELECTED ROW
		$dgv_SSA_Select.FirstDisplayedScrollingRowIndex = $($dgv_SSA_Select.SelectedRows[0].Index)
		
		Show-SSAInfo
	}
}

$button_SSA_AddMemberOf_Click = {
	
	# OPEN GROUP PICKER, AND ADD THE SSA TO THE GROUP SELECTED
	If (Show-GroupPicker_psf -ADObjectTypes "Group")
	{
		If ($SelectedADObject)
		{
			Add-SSAGroupsToDGV -SSA $SelectedSSA -Group $SelectedADObject
			Show-SSAInfo
			Remove-Variable -Name SelectedADObject -Scope Script -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
		}
	}
	
}

$button_SSA_RemoveMemberOf_Click = {
	
	# REMOVE SSA FROM SELECTED GROUP
	Remove-SSAfromGroup -SSA $($textbox_SSA_SamAccountName.Text) -Group $($dgv_SSA_EditMemberOf.SelectedRows | ForEach-Object { $_.Cells['Member Of'].value }) -Confirm:$false
	Show-SSAInfo
	
}

$button_SSA_SaveDGVtoCSV_Click = {
	
	if ($savefiledialog_SSA_DGV.ShowDialog() -eq 'Ok')
	{
		$dgv_SSA_Select.ClipboardCopyMode = 'EnableAlwaysIncludeHeaderText'
		$dgv_SSA_Select.Rows | Select-Object -expand DataBoundItem | Export-Csv -Path $savefiledialog_SSA_DGV.FileName -Delimiter ";" -NoTypeInformation
	}
	
}

$contextmenustrip_SSA_Remove_Click = {
	
	Remove-SSA -Confirm:$false
	Get-SSAToDGV
	Show-SSAInfo
	
}

$contextmenustrip_SSA_CreateGMSA_Click = {
	
	Show-NewServiceAccountForm -GroupManagedServiceAccount -FromStandardServiceAccount
	
}




#endregion Standard Service Account Tab

$tabcontrol_ServiceAccounts_SelectedIndexChanged={
	
	if ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_GMSA)
	{
		# LOAD A LIST OF THE GROUP MANAGED SERVICE ACCOUNTS THAT CURRENTLY EXIST
		Get-GMSAToDGV
		
		# SHOW THE GROUP MANAGED SERVICE ACCOUNT PROPERTIES FOR THE GMSA CURRENTLY SELECTED
		Show-GMSAInfo
	}
	elseif ($tabcontrol_ServiceAccounts.SelectedTab -eq $tabpage_ServiceAccounts_Standard)
	{
		# LOAD A LIST OF THE STANDARD SERVICE ACCOUNTS THAT CURRENTLY EXIST
		$textbox_SSA_AccountSelectOU.Text = Find-ServiceAccountOU
		Get-SSAToDGV
		
		# SHOW THESTANDARD SERVICE ACCOUNT PROPERTIES FOR THE ACCOUNT CURRENTLY SELECTED
		Show-SSAInfo
	}

}
$button_ServiceAccounts_About_Click={
	
	Show-MsgBox -Title "About" -Prompt "Created by:`r`n`r`n$Author`r`n$AuthorEmail" -Icon Information -BoxType OKOnly
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>